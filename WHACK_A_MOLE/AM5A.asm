;[@@@ Voice Label @@@]
;This segment is auto-generated by Alpha IDE - do not modify!
extern V0
extern V1
extern V2
extern V3
extern V4
extern V5
extern V6
extern V7
extern V8
extern V9
extern V10
extern V11
extern V12
extern V13
extern V14
extern V15
extern V16
extern V17
extern V18
extern V19
extern V20
extern V21
extern V22
extern V23
extern V24
extern V25
extern V26
extern V27
extern V28
extern V29
extern V30
extern V31
extern V32
extern V33
extern V34
extern V35
extern V36
extern V37
extern V38
extern V39
extern V40
extern V41
extern V42
extern V43
extern V44
extern V45
extern V46
extern V47
extern V48
extern V49
extern V50
extern V51
extern V52
extern V53
extern V54
extern V55
extern V56
extern V57
;[@@@ Voice Label @@@]
;[@@@ VOICE LABEL @@@]
;THIS SEGMENT IS AUTO-GENERATED BY ALPHA IDE - DO NOT MODIFY!
EXTERN V0
;[@@@ VOICE LABEL @@@]
;[@@@ VOICE LABEL @@@]
;THIS SEGMENT IS AUTO-GENERATED BY ALPHA IDE - DO NOT MODIFY!
EXTERN V0
;[@@@ VOICE LABEL @@@]
;[@@@ VOICE LABEL @@@]
;THIS SEGMENT IS AUTO-GENERATED BY ALPHA IDE - DO NOT MODIFY!
EXTERN V0
;[@@@ VOICE LABEL @@@]
;[@@@ VOICE LABEL @@@]
;THIS SEGMENT IS AUTO-GENERATED BY ALPHA IDE - DO NOT MODIFY!
EXTERN V0
;[@@@ VOICE LABEL @@@]
;====================================================================================================
; ALPHA AM5A ASM EXAMPLE COPYRIGHT(C) ALPHA MICROELECTRONICS CORP.
;====================================================================================================
LIST C=OFF,R=DEC
; FOR EXAMPLE:
;		 LIST C=OFF,R=DEC,P=AM4KA000X
;		 C =	ON/OFF -> ENABLE/DISABLE CASE SENSITIVITY. DEFAULT = ON
;		 N =	256	-> MAXIMUM ITERATION COUNT. DEFAULT = 256
;		 P =	IT SET THE PROCESSOR NAME.
;		 R = “HEX” | “DEC” | “OCT” | “BIN”	“HEX”	RADIX SETTING. DEFAULT = HEX

;====================================================================================================
; ***********************
; INCLUDE *.H FILES
; ***********************
#INCLUDE "5A_SFR.H"  
#INCLUDE "AM5ASOFTWAREMODE.M"
#INCLUDE "AM5APLAYV.M"
#INCLUDE "Scott_Macro.M"   
;====================================================================================================
//SAMPLE RATE DEFINE

#DEFINE         SR_8M_06K          0XA6
#DEFINE         SR_8M_08K          0X7D
#DEFINE         SR_8M_10K          0X64

#DEFINE         SR_8M_12K          0X53
#DEFINE         SR_8M_16K          0X3E
#DEFINE         SR_8M_20K          0X32

#DEFINE         SR_12M_06K         0X0FA
#DEFINE         SR_12M_08K         0X0BB
#DEFINE         SR_12M_10K         0X096  
				
#DEFINE         SR_12M_12K         0X07D
#DEFINE         SR_12M_16K         0X05D  
#DEFINE         SR_12M_20K         0X04B

;------------------------------------------------------------------------------------------
//SELF DEFINE VALUE

#DEFINE         LED_SCAN_FREQUENCE     0X02     //4MS
#DEFINE         KEY_DEBOUNCE_DELAY     0X0F     //30MS
#DEFINE         RANDOM_VALUE_MAX       0X06     //7 LED

#DEFINE         LEVEL_1_DELAY          0X12C    //0.6S
#DEFINE         LEVEL_1_APPEAR_TIME    0X19     //25 

#DEFINE         LEVEL_2_DELAY          0X113    //0.55S
#DEFINE         LEVEL_2_APPEAR_TIME    0X1E     //30 

#DEFINE         LEVEL_3_DELAY          0XC8     //0.4S
#DEFINE         LEVEL_3_APPEAR_TIME    0X28     //40

#DEFINE         AWESOME_TIME           0X06     //6次 
#DEFINE         IDIOT_TIME             0X03     //3次
#DEFINE         SLOW_TIME              0X03     //3次

#DEFINE         TURN_OFF_TIME          0X5DC    //3秒 

#DEFINE         IDLE_TO_SLEEP_TIME     0X5DC    //3秒 
#DEFINE         IDLE_LOOP_TIME         0X0A     //乘10次(30秒) 
                              
#DEFINE         FLASHING_SPEED         0X0A6    //3HZ(火雞的時候) 
#DEFINE         LED_DELAY              0X0A6    //3HZ(CHOSE_LEVEL)
#DEFINE         SOUND_LEVEL            0X00     //聲音大小 
         
;------------------------------------------------------------------------------------------
//ENCODE TABLE

#DEFINE         DELAY              0X00     //延遲                                                  //卡                     
#DEFINE         ADPCM              0X01     //播聲音                                                //卡(PAUSEV) 
#DEFINE         LED_SET            0X02     //LED設置                                               //卡流程 
#DEFINE         FLASHING           0X03     //LED閃爍(讀表沒用到，先放著)                           //卡 
#DEFINE         CAROUSEL           0X04     //LED輪播                                               //卡 
#DEFINE         LIFE_POINT_SHOW    0X05     //SHOW出生命值                                          //卡流程 
                                        
#DEFINE         LEVEL_CHECK        0XE0     //等級檢查(跳到對應關卡的GAME LOOP)                     //卡流程
#DEFINE         GAME_READY         0XE1     //遊戲已準備好開始(KEY_ROW_2 == #0001B)                 //卡流程                              
#DEFINE         RETURN_CHECK       0XE2     //回到原本的FLOW(GAME LOOP用)(用判斷+JMP返回)           //卡流程
#DEFINE         INDEX              0XE3     //RETURN_CHECK決定要跳回去的地方                        //卡流程
#DEFINE         SCORE_CHECK        0XE4     //檢查怎麼報分數(分八類)                                //卡流程
#DEFINE         P_LOW0             0XE5     //報分數LOW0(有發出聲音)                                //卡流程
#DEFINE         P_LOW1             0XE6     //報分數LOW1(有發出聲音)                                //卡流程
#DEFINE         P_MID0             0XE7     //報分數MID0(有發出聲音)                                //卡流程
#DEFINE         OTHER_SOUND        0XE8     //報分數用到的其他聲音(十百千分...)(有發出聲音)         //卡流程 
#DEFINE         PLAY_SCORE         0XE9     //播報分數(跳到對應關卡的報分數TABLE)(只有跳TABLE功能)  //卡流程 
#DEFINE         HONOR_CHECK        0XEA     //榮譽檢查                                              //卡流程
#DEFINE         CHECK_LOOP         0XEB     //無窮迴圈，用來卡FLOW                                  //無關 
#DEFINE         SAVE_ADDRESS       0XEC     
#DEFINE         RET_ADDRESS        0XED     
#DEFINE         SET_STOP_FLAG      0XEE

#DEFINE         GAME_END           0XF0     //KEY_ROW_2   BIT 0 = 0 (表結束)                        //卡流程
#DEFINE         RETURN_END         0XF1     //回到原本的FLOW(一般用途)(用TMP存返回位址)             //卡流程
#DEFINE         LOOP_END           0XF2     //跳回遊戲LOOP的頭                                      //卡流程
#DEFINE         CHOOSE_END         0XF3     //KEY_ROW_2   BIT 1 = 0 (表選關結束)                    //無關 
#DEFINE         SLEEP_END          0XF4     

;====================================================================================================	
//GENERAL SRAM

;GENERAL SRAM FOR SOFTWARE PLAY VOICE USE: 0x30H~ 0x39H (CAN NOT USE)
;R@SaveAcc    	      EQU            0x30	;2009-12-03 yf
;R@SaveSTATUSCPU      EQU            0x31	;2009-12-03 yf 
;R@IntSaveTreg0       EQU            0x32	;2009-12-03 yf  
;R@IntSaveTreg1       EQU            0x33	;2009-12-03 yf  
;R@IntSaveTreg2       EQU            0x34	;2009-12-03 yf  
;R@IntSaveTreg3       EQU            0x35	;2009-12-03 yf  
;R@IntSaveTreg4       EQU            0x36	;2009-12-03 yf  
;R@PlayVFlag    	  EQU            0x37	;2009-12-03 yf     
;R@VDataFormat	      EQU            0x38	;2009-12-03 yf     
;R@PauseV	          EQU 	         0x39	;2009-12-03 yf            

//LED_SCAN
LED_SCAN_TIMER        EQU            0X3A
LED_SCAN_LINE_COUNTER EQU            0X3B

//LED_STATE
LED_ROW_0             EQU            0X3C
LED_ROW_1             EQU            0X3D
LED_ROW_2             EQU            0X3E

//KEY_SCAN
KEY_DEBOUNCE_TIMER    EQU            0X3F
KEY_SCAN_LINE_COUNTER EQU            0X40
WHICH_KEY_CHANGE      EQU            0X41

//NEW OLD KEY
NEW_KEY               EQU            0X42
OLD_KEY_0             EQU            0X43
OLD_KEY_1             EQU            0X44
OLD_KEY_2             EQU            0X45
OLD_KEY_TMP           EQU            0X46

//RESULT
PRESS_RESULT          EQU            0X47
RELEASE_RESULT        EQU            0X48

//2MS_TMR                                                                                        
GENERAL_2MS_TIMER     EQU            0X49           //BIT0 : GENERAL_DELAY  BIT1 : RANDOM_DELAY  BIT2 : TURN_OFF  BIT3 : SLEEP

//GENERAL_DELAY TMP(讀表DELAY)(不可與輪播或閃爍共存，因DELAY共用)
DELAY_LOW0            EQU            0X4A
DELAY_LOW1            EQU            0X4B
DELAY_MID0            EQU            0X4C

//SPECIFY VOICE DATA(ADDRESS & PCM_FLAG)(讀表播聲音)
SPECIFY_VOICE_ADDRESS_LOW0    EQU    0X4D
SPECIFY_VOICE_ADDRESS_LOW1    EQU    0X4E
SPECIFY_VOICE_ADDRESS_MID0    EQU    0X4F
SPECIFY_VOICE_ADDRESS_MID1    EQU    0X50
SPECIFY_VOICE_ADDRESS_HIGH0   EQU    0X51
PCM_F                         EQU    0X52

;DECODE----------------------------------------

//STOP DECODE JUDGE
STOP_FLAG             EQU            0X53           //BIT0 : GENERAL_DELAY  BIT 1 : SILENCE  BIT 2 : PAUSE 

//CODE VALUE                         
CODE_VALUE_LOW0       EQU            0X54
CODE_VALUE_LOW1       EQU            0X55

//OPERATION VALUE
OPERATION_VALUE_LOW0  EQU            0X56
OPERATION_VALUE_LOW1  EQU            0X57
OPERATION_VALUE_MID0  EQU            0X58

;FLOW------------------------------------------

//CURRENT TABLE FLOW
TABLE_LOW0            EQU            0X59
TABLE_LOW1            EQU            0X5A
TABLE_MID0            EQU            0X5B
TABLE_MID1            EQU            0X5C
TABLE_HIGH0           EQU            0X5D

//CURRENT VOICE TABLE FLOW
VOICE_TABLE_LOW0      EQU            0X5E
VOICE_TABLE_LOW1      EQU            0X5F
VOICE_TABLE_MID0      EQU            0X60
VOICE_TABLE_MID1      EQU            0X61
VOICE_TABLE_HIGH0     EQU            0X62

;----------------------------------------------

//KEY STATE 
KEY_ROW_0             EQU            0X63
KEY_ROW_1             EQU            0X64
KEY_ROW_2             EQU            0X65

//OPERATION VALUE 1
OPERATION_VALUE_1_LOW0        EQU    0X66
OPERATION_VALUE_1_LOW1        EQU    0X67
OPERATION_VALUE_1_MID0        EQU    0X68

//LEVEL CHECK
LEVEL_COUNTER         EQU            0X69 

//JUDGE LEVEL END                
FINISH_FLAG           EQU            0X6A         //BIT 1 : LOSE  BIT 2 : APPEAR_OVER

//CONTINUE COUNTER                       
AWESOME_CNT           EQU            0X6B
IDIOT_CNT             EQU            0X6C
SLOW_CNT              EQU            0X6D

//FOR SELECT VOICE
ADPCM_LOOP_CNT        EQU            0X6E         //INIT : 0X06

//RANDOM
RANDOM_VALUE          EQU            0X6F

//RANDOM DELAY(亂數DELA,與普通DELAY同步) 
RAND_DELAY_LOW0       EQU            0X70
RAND_DELAY_LOW1       EQU            0X71
RAND_DELAY_MID0       EQU            0X72

//FLASHING_POSITION(功能寫在MAIN_LOOP)
FLASHING_L0           EQU            0X73           
FLASHING_L1           EQU            0X74 
FLASHING_L2           EQU            0X75

//CONTROL_FLAG          
CONTROL_FLAG          EQU            0X76         //BIT 0 : RANDOM_FLAG  BIT 1 : MISCLICK HAPPEND CHECK  BIT 2 : FLASHING_FLAG(閃爍)  BIT 3 : CAROUSEL_FLAG(輪播) 

//PLAYING                                         (HAMSTER KEY ENABLE OR DISABLE)
GAME_FLAG             EQU            0X7A         //BIT 0  : IN GAME     BIT 1 : RIGHT                   BIT 2 : WRONG                 BIT 3 : 防連按 

//TOTAL SCORE
POINT_LOW0            EQU            0X7B
POINT_LOW1            EQU            0X7C
POINT_MID0            EQU            0X7D

//LIFE_POINT(3 POINT)
LIFE_POINT            EQU            0X7E

//MISCLICK
MISCLICK              EQU            0X7F

//MISS 
MISS                  EQU            0X80 

//輪播CNT 
CAROUSEL_CNT          EQU            0X81

//流程停止FLAG 
CONTROL_FLAG_2        EQU            0X82       //BIT 0 : FLOW_STOP_FLAG  BIT 1 : TURN_OFF_FLAG  BIT 2 : IDLE_FLAG

//CURRENT APPEAR TIME
APPEAR_LOW0           EQU            0X83     
APPEAR_LOW1           EQU            0X84

//FOR RETURN
ADDRESS_INDEX         EQU            0X85

//FLOW RET TMP(報分數用)
RET_TMP_LOW0          EQU            0X86
RET_TMP_LOW1          EQU            0X87
RET_TMP_MID0          EQU            0X88
RET_TMP_MID1          EQU            0X89
RET_TMP_HIGH0         EQU            0X8A

//FLOW RET TMP(暫停播分數用) 
RET_TMP_1_LOW0        EQU            0X8B
RET_TMP_1_LOW1        EQU            0X8C
RET_TMP_1_MID0        EQU            0X8D
RET_TMP_1_MID1        EQU            0X8E
RET_TMP_1_HIGH0       EQU            0X8F

;------------------------------------------------------------------------------------------    
//WORKING SRAM

;WORKING SRAM FOR SOFTWARE PLAY VOICE USE: 0x18H~ 0x22H (CAN NOT USE)							
;R@MainVar0           EQU            0x18	;2011-07-15 yf  								
;R@DACTemp0           EQU            0x19	;2009-12-03 yf
;R@DACTemp1	          EQU            0x1a	;2009-12-03 yf
;R@DACTemp2	          EQU            0x1b	;2009-12-03 yf
;R@Vpr0Temp	          EQU            0x1c	;2009-12-03 yf
;R@Vpr1Temp	          EQU            0x1d	;2009-12-03 yf
;R@Vpr2Temp	          EQU            0x1e	;2009-12-03 yf
;R@Vpr3Temp	          EQU            0x1f	;2009-12-03 yf
;R@Vpr4Temp	          EQU            0x20	;2009-12-03 yf 
;R@IntVar0	          EQU            0x21	;2009-12-03 yf
;R@IntVar1	          EQU            0x22	;2009-12-03 yf

TMP0                  EQU            0x23       //KEY, POINT++, APPEAR_TIME_COUNT, NUMBER_CHECK, BG_FLASHING
TMP1                  EQU            0x24       //GENERAL_COUNTDOWN
TMP2                  EQU            0x25       //FLOW, TURN_OFF_COUNTDOWN
TMP3                  EQU            0x26       //RAND_COUNTDOWN

TURN_OFF_DELAY_LOW0   EQU            0X27
TURN_OFF_DELAY_LOW1   EQU            0X28
TURN_OFF_DELAY_MID0   EQU            0X29

SLEEP_DEBOUNCE        EQU            0X2A

LOOP_CNT              EQU            0X2B

;====================================================================================================
;***********************
; RESET VECTOR (ORG 0X00000~0X0000F)
;***********************
ORG      0X00000

               JMP             @MAIN                                    
;====================================================================================================
;***********************
; INTERRUPT VECTOR (ORG 0X00010~0X0001F)
;***********************
ORG     0X00010
               JMP			   @INT
                            
;====================================================================================================
ORG     0X00020
;***********************
; RESERVED MEMORY (ORG 0X00020~0X003FF) DON'T USE
;***********************

ORG     0X400
@INT: 
                M@SOFTWAREDECODER	

                ;USER INTERRUPT CODE PLACED HERE

                M@RESTOREREGDATA
        
                RET   

;====================================================================================================     

@MAIN:

;------------------------------------------------------------------------------------------
//RAM INITIAL
 
    MOVIA       0X00
    
;------------------------------------------------------------------------------------------       
//WORKING SRAM

    MOVAR       0X18
    MOVAR       0X19
    MOVAR       0X1A                
    MOVAR       0X1B
    MOVAR       0X1C
    MOVAR       0X1D
    MOVAR       0X1E
    MOVAR       0X1F      
    MOVAR       0X20
    MOVAR       0X21
    MOVAR       0X22
    MOVAR       0X23
    MOVAR       0X24
    MOVAR       0X25
    MOVAR       0X26
    MOVAR       0X27
    MOVAR       0X28
    MOVAR       0X29
    MOVAR       0X2A
    MOVAR       0X2B
    MOVAR       0X2C
    MOVAR       0X2D
    MOVAR       0X2E
    MOVAR       0X2F      
    
;------------------------------------------------------------------------------------------     
//GENERAL SRAM
    
    MOVAR       0X30
    MOVAR       0X31
    MOVAR       0X32
    MOVAR       0X33
    MOVAR       0X34
    MOVAR       0X35
    MOVAR       0X36
    MOVAR       0X37
    MOVAR       0X38
    MOVAR       0X39
    MOVAR       0X3A
    MOVAR       0X3B
    MOVAR       0X3C
    MOVAR       0X3D
    MOVAR       0X3E
    MOVAR       0X3F      
    MOVAR       0X40
    MOVAR       0X41
    MOVAR       0X42
    MOVAR       0X43
    MOVAR       0X44
    MOVAR       0X45
    MOVAR       0X46
    MOVAR       0X47
    MOVAR       0X48
    MOVAR       0X49
    MOVAR       0X4A
    MOVAR       0X4B
    MOVAR       0X4C
    MOVAR       0X4D
    MOVAR       0X4E
    MOVAR       0X4F      
    MOVAR       0X50
    MOVAR       0X51
    MOVAR       0X52
    MOVAR       0X53
    MOVAR       0X54
    MOVAR       0X55
    MOVAR       0X56
    MOVAR       0X57
    MOVAR       0X58
    MOVAR       0X59
    MOVAR       0X5A
    MOVAR       0X5B
    MOVAR       0X5C
    MOVAR       0X5D
    MOVAR       0X5E
    MOVAR       0X5F       
    MOVAR       0X60
    MOVAR       0X61
    MOVAR       0X62
    MOVAR       0X63
    MOVAR       0X64
    MOVAR       0X65
    MOVAR       0X66
    MOVAR       0X67
    MOVAR       0X68
    MOVAR       0X69
    MOVAR       0X6A
    MOVAR       0X6B
    MOVAR       0X6C
    MOVAR       0X6D
    MOVAR       0X6E
    MOVAR       0X6F      
    MOVAR       0X70
    MOVAR       0X71
    MOVAR       0X72
    MOVAR       0X73
    MOVAR       0X74
    MOVAR       0X75
    MOVAR       0X76
    MOVAR       0X77
    MOVAR       0X78
    MOVAR       0X79
    MOVAR       0X7A
    MOVAR       0X7B
    MOVAR       0X7C
    MOVAR       0X7D
    MOVAR       0X7E
    MOVAR       0X7F      
    MOVAR       0X80
    MOVAR       0X81
    MOVAR       0X82
    MOVAR       0X83
    MOVAR       0X84
    MOVAR       0X85
    MOVAR       0X86
    MOVAR       0X87
    MOVAR       0X88
    MOVAR       0X89
    MOVAR       0X8A
    MOVAR       0X8B
    MOVAR       0X8C
    MOVAR       0X8D
    MOVAR       0X8E
    MOVAR       0X8F
    MOVAR       0X90
    MOVAR       0X91
    MOVAR       0X92
    MOVAR       0X93
    MOVAR       0X94
    MOVAR       0X95
    MOVAR       0X96
    MOVAR       0X97
    MOVAR       0X98
    MOVAR       0X99
    MOVAR       0X9A
    MOVAR       0X9B
    MOVAR       0X9C
    MOVAR       0X9D
    MOVAR       0X9E
    MOVAR       0X9F
    
    InitialVoiceRam      
    
;------------------------------------------------------------------------------------------  
//SFR INITIAL
        
    //STATUS 
    MOVIA       0X00
    MOVAR       STATUS
      
    //PERI
    MOVIA       0X01
    MOVAR       PERI
    
    //PERI2
    MOVIA       0X00
    MOVAR       PERI2
     
    //VOL
    MOVIA       0X00
    MOVAR       VOL

    //PRAIO
    MOVIA       0X00      
    MOVAR       PRAIO
    
    //PRA
    MOVIA       0X00
    MOVAR       PRA 
    
    //PRAPL
    MOVIA       0X00      
    MOVAR       PRAPL 

    //PRBIO
    MOVIA       0X00      
    MOVAR       PRBIO
    
    //PRB
    MOVIA       0X00
    MOVAR       PRB
       
    //PRBPL
    MOVIA       0X00      
    MOVAR       PRBPL     
 
    //PRCIO
    MOVIA       0X00                 
    MOVAR       PRCIO
    
    //PRC
    MOVIA       0X00
    MOVAR       PRC
    
    //PRCPL
    MOVIA       0X00                  
    MOVAR       PRCPL    

    //PRDIO
    MOVIA       0X0F      
    MOVAR       PRDIO
    
    //PRD
    MOVIA       0X00
    MOVAR       PRD
    
    //PRDPL
    MOVIA       0X0F      
    MOVAR       PRDPL
    
;------------------------------------------------------------------------------------------
//SELFDEFINE RAM INITIAL 
    
    //LED SET TO DISABLE
    MOVIA       #1111B
    MOVAR       LED_ROW_0
    MOVAR       LED_ROW_1
    MOVAR       LED_ROW_2
    
    MOVIA       0X03
    MOVAR       LIFE_POINT    
    
    MOVIA       0X06
    MOVAR       ADPCM_LOOP_CNT
    
    //INIT RANDOM_VALUE
    MOVIA       RANDOM_VALUE_MAX    
    MOVAR       RANDOM_VALUE
    
;------------------------------------------------------------------------------------------    
//PLAY VOICE SETTING
    
    CALL        CLOSE_INTERRUPT    		             
    
    //SET SAMPLE RATE    
    MOVIA       LOW0 SR_8M_06K           
    MOVAR       TREG0
    MOVIA       LOW1 SR_8M_06K 
    MOVAR       TREG1
    MOVIA       MID0 SR_8M_06K 
    MOVAR       TREG2
                                                 
    WRTMR												

    CALL        OPEN_INTERRUPT
    
;==================================================================================================== 

MAIN_LOOP:

    JMP         MAIN_POLLING_TIMER                            
                MAIN_POLLING_TIMER_RET:
                
    JMP         GENERAL_DELAY                                 
                GENERAL_DELAY_RET:
                
    JMP         BG_FLASHING         //BG = BACKGROUNG        
                BG_FLASHING_RET:
    
    JMP         BG_CAROUSEL         //BG = BACKGROUNG         
                BG_CAROUSEL_RET:            
                
    JMP         TURN_OFF_CHECK
                TURN_OFF_CHECK_RET: 
    
    JMP         LED_SCAN                                      
                LED_SCAN_RET:
    
    JMP         KEY_SCAN                                      
                KEY_SCAN_RET:
                                     
    JMP         BOOT                                          
                BOOT_RET:
    
    JMP         RANDOM                                        
                RANDOM_RET: 
                
    JMP         MAIN_LOOP
    
;==================================================================================================== 

MAIN_POLLING_TIMER:

    MOVRA       PERI
    SAB1        0X08
    JMP         MAIN_POLLING_TIMER_END
    
;------------------------------------------------------------------------------------------

SIGNAL_RISE:

    CLRWDT
   
;----------------------------------------------------   
//RANDOM SEED                                  
    
    //RANDOM_VALUE_MAX OR NOT
    MOVRA       RANDOM_VALUE
    SANEI       RANDOM_VALUE_MAX
    JMP         RANDOM_VALUE_RESET_TO_ZERO
    
RANDOM_VALUE_INC:

    //COUNT RANDOM_VALUE 
    MOVRA       RANDOM_VALUE
    INCA
    MOVAR       RANDOM_VALUE
    
    JMP         OTHER_COUNTERS
    
RANDOM_VALUE_RESET_TO_ZERO:

    //RESET RANDOM_VALUE 
    MOVIA       0X00
    MOVAR       RANDOM_VALUE  
    
;----------------------------------------------------    

OTHER_COUNTERS:    
    
    //LED_SCAN(4MS) 
    MOVRA       LED_SCAN_TIMER
    INCA                                               
    MOVAR       LED_SCAN_TIMER
    
    //KEY_SCAN(30MS) 
    MOVRA       KEY_DEBOUNCE_TIMER
    INCA
    MOVAR       KEY_DEBOUNCE_TIMER
    
    //關機(3秒) 2(TURN_OFF) 
    MOVRA       GENERAL_2MS_TIMER
    ORI         #0100B
    MOVAR       GENERAL_2MS_TIMER
    
;----------------------------------------------------    
    
    //暫停時，DELAY不動作，RANDOM_DELAY不播燈 
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         MAIN_POLLING_TIMER_END
    
    //GENERAL_2MS_TMR 0(DELAY) 1(RAND_DELAY)
    MOVRA       GENERAL_2MS_TIMER
    ORI         #0011B
    MOVAR       GENERAL_2MS_TIMER
    
;------------------------------------------------------------------------------------------       
    
MAIN_POLLING_TIMER_END:

    JMP         MAIN_POLLING_TIMER_RET      
    
;====================================================================================================

SLEEP_POLLING_TIMER:

    MOVRA       PERI
    SAB1        0X08
    JMP         SLEEP_POLLING_TIMER_END
    
;------------------------------------------------------------------------------------------

SIGNAL_RISE_2:

    CLRWDT
    
    //睡眠用    3(SLEEP)
    MOVRA       GENERAL_2MS_TIMER
    ORI         #1000B
    MOVAR       GENERAL_2MS_TIMER 
    
    //睡眠DEBOUNCE (10MS)
    MOVRA       SLEEP_DEBOUNCE
    INCA
    MOVAR       SLEEP_DEBOUNCE 
    
    //KEY_DEBOUNCE
    MOVRA       KEY_DEBOUNCE_TIMER
    INCA
    MOVAR       KEY_DEBOUNCE_TIMER
    
SLEEP_POLLING_TIMER_END:
    
    RET

;====================================================================================================    

TURN_OFF_CHECK:

    MOVRA       CONTROL_FLAG_2
    SAB1        #0010B
    JMP         TURN_OFF_CHECK_END
    
    MOVRA       GENERAL_2MS_TIMER
    SAB1        #0100B
    JMP         TURN_OFF_CHECK_END
    
B0:

    MOVRA       GENERAL_2MS_TIMER
    ANDI        #1011B
    MOVAR       GENERAL_2MS_TIMER
    
    //RESET C_FLAG
    MOVIA       0X00
    MOVAR       STATUS 

    //COUNTDOWN
    MOVRA       TURN_OFF_DELAY_LOW0
    DECA
    MOVAR       TURN_OFF_DELAY_LOW0  
        
    MOVIA       0X00
    MOVAR       TMP2
    MOVRA       TURN_OFF_DELAY_LOW1
    SBC         TMP2
    MOVAR       TURN_OFF_DELAY_LOW1
    
    MOVIA       0X00
    MOVAR       TMP2
    MOVRA       TURN_OFF_DELAY_MID0
    SBC         TMP2
    MOVAR       TURN_OFF_DELAY_MID0
    
    //RESET TMP2
    MOVIA       0X00
    MOVAR       TMP2 
    
COUNTDOWN_FINISH_OR_NOT_2:
    
    MOVRA       TURN_OFF_DELAY_MID0
    SAEQI       0X00
    JMP         TURN_OFF_CHECK_END
    
    MOVRA       TURN_OFF_DELAY_LOW1
    SAEQI       0X00
    JMP         TURN_OFF_CHECK_END
    
    MOVRA       TURN_OFF_DELAY_LOW0
    SAEQI       0X00
    JMP         TURN_OFF_CHECK_END
    
    //OPEN FLOW
    MOVRA       CONTROL_FLAG_2       
    ANDI        #1110B
    MOVAR       CONTROL_FLAG_2
    
    //CLOSE TURN_OFF_FLAG
    MOVRA       CONTROL_FLAG_2       
    ANDI        #1101B
    MOVAR       CONTROL_FLAG_2
    
    MOVIA       LOW0 CLOSE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 CLOSE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 CLOSE
    MOVAR       TABLE_MID0
    MOVIA       MID1 CLOSE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 CLOSE
    MOVAR       TABLE_HIGH0

TURN_OFF_CHECK_END:

    JMP     TURN_OFF_CHECK_RET
    
;====================================================================================================

BG_CAROUSEL:

    //暫停時，直接出去(保險)
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         BG_CAROUSEL_END 

    //控制出入 
    MOVRA       CONTROL_FLAG
    SAB1        #1000B
    JMP         BG_CAROUSEL_END 
    
    //判斷是否為0 
    MOVRA       DELAY_LOW0
    SAEQI       0X00
    JMP         BG_CAROUSEL_END
    
    MOVRA       DELAY_LOW1
    SAEQI       0X00
    JMP         BG_CAROUSEL_END
    
    MOVRA       DELAY_MID0
    SAEQI       0X00
    JMP         BG_CAROUSEL_END
    
;--------------------------------------
    
    MOVRA       CAROUSEL_CNT
    SANEI       0X00
    JMP         NO_1_GRAPHIC
    
    SANEI       0X01
    JMP         NO_2_GRAPHIC
    
    SANEI       0X02
    JMP         NO_3_GRAPHIC
    
    SANEI       0X03
    JMP         NO_4_GRAPHIC
    
    JMP         BG_CAROUSEL_END
    
NO_1_GRAPHIC:    
    
    MOVIA       #1110B
    MOVAR       LED_ROW_0 

    MOVIA       #1111B
    MOVAR       LED_ROW_1
    
    MOVIA       #1111B
    MOVAR       LED_ROW_2
     
    MOVRA       CAROUSEL_CNT
    INCA
    MOVAR       CAROUSEL_CNT
    
    MOVIA       LOW0 LED_DELAY
    MOVAR       DELAY_LOW0
    MOVIA       LOW1 LED_DELAY
    MOVAR       DELAY_LOW1
    MOVIA       MID0 LED_DELAY
    MOVAR       DELAY_MID0
    
    JMP         BG_CAROUSEL_END
    
NO_2_GRAPHIC:

    MOVIA       #0111B
    MOVAR       LED_ROW_0 

    MOVIA       #1111B
    MOVAR       LED_ROW_1
    
    MOVIA       #1111B
    MOVAR       LED_ROW_2
     
    MOVRA       CAROUSEL_CNT
    INCA
    MOVAR       CAROUSEL_CNT
    
    MOVIA       LOW0 LED_DELAY
    MOVAR       DELAY_LOW0
    MOVIA       LOW1 LED_DELAY
    MOVAR       DELAY_LOW1
    MOVIA       MID0 LED_DELAY
    MOVAR       DELAY_MID0
    
    JMP         BG_CAROUSEL_END
    
NO_3_GRAPHIC:

    MOVIA       #1111B
    MOVAR       LED_ROW_0 

    MOVIA       #1101B
    MOVAR       LED_ROW_1
    
    MOVIA       #1111B
    MOVAR       LED_ROW_2
     
    MOVRA       CAROUSEL_CNT
    INCA
    MOVAR       CAROUSEL_CNT
    
    MOVIA       LOW0 LED_DELAY
    MOVAR       DELAY_LOW0
    MOVIA       LOW1 LED_DELAY
    MOVAR       DELAY_LOW1
    MOVIA       MID0 LED_DELAY
    MOVAR       DELAY_MID0
    
    JMP         BG_CAROUSEL_END
    
NO_4_GRAPHIC:

    MOVIA       #0110B
    MOVAR       LED_ROW_0 

    MOVIA       #1101B
    MOVAR       LED_ROW_1
    
    MOVIA       #1111B
    MOVAR       LED_ROW_2
     
    MOVIA       0X00
    MOVAR       CAROUSEL_CNT
    
    MOVRA       CONTROL_FLAG
    ANDI        #0111B
    MOVAR       CONTROL_FLAG

BG_CAROUSEL_END:

    JMP         BG_CAROUSEL_RET

;==================================================================================================== 

BG_FLASHING: 

    //暫停時，直接出去(保險)
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         BG_FLASHING_END 

    //控制出入 
    MOVRA       CONTROL_FLAG
    SAB1        #0100B
    JMP         BG_FLASHING_END
    
    //解碼時會先把DELAY值設好
    //判斷是否為0 
    MOVRA       DELAY_LOW0
    SAEQI       0X00
    JMP         BG_FLASHING_END
    
    MOVRA       DELAY_LOW1
    SAEQI       0X00
    JMP         BG_FLASHING_END
    
    MOVRA       DELAY_MID0
    SAEQI       0X00
    JMP         BG_FLASHING_END 
    
;---------------------------------
//數完了，輸出反向    
    
    MOVRA       FLASHING_L0
    MOVAR       TMP0
    
    MOVRA       LED_ROW_0
    XOR         TMP0
    MOVAR       LED_ROW_0 
    
;---------------------------------
    
    MOVRA       FLASHING_L1
    MOVAR       TMP0
    
    MOVRA       LED_ROW_1
    XOR         TMP0
    MOVAR       LED_ROW_1 
    
;---------------------------------

    MOVRA       FLASHING_L2
    MOVAR       TMP0
    
    MOVRA       LED_ROW_2
    XOR         TMP0
    MOVAR       LED_ROW_2
    
;---------------------------------

    //RESET TMP0
    MOVIA       0X00
    MOVAR       TMP0
    
;---------------------------------        

    //重製DELAY
    MOVIA       LOW0 FLASHING_SPEED
    MOVAR       DELAY_LOW0
    
    MOVIA       LOW1 FLASHING_SPEED
    MOVAR       DELAY_LOW1
    
    MOVIA       MID0 FLASHING_SPEED
    MOVAR       DELAY_MID0 
    
BG_FLASHING_END:

    JMP         BG_FLASHING_RET
    
;====================================================================================================

LED_SCAN:

    //4MS SCAN TIME
    MOVRA       LED_SCAN_TIMER
    SAEQI       LED_SCAN_FREQUENCE
    JMP         LED_SCAN_END
    
    //RESET LED_SCAN_TIMER
    MOVIA       0X00
    MOVAR       LED_SCAN_TIMER
    
;------------------------------------------------------------------------------------------
    
CHOOSE_LED_SCAN_LINE:

    MOVRA       LED_SCAN_LINE_COUNTER
    SANEI       0X00
    JMP         LED_SCAN_LINE_0
    
    SANEI       0X01
    JMP         LED_SCAN_LINE_1
    JMP         LED_SCAN_LINE_2
    
;------------------------------------------------------------------------------------------
    
LED_SCAN_LINE_0:

    //CLEAR DATA & SCAN LINE (WHEN CLEAR, DATA LINE FIRST)
    MOVIA       #1111B
    MOVAR       PRB             //DATA_LINE
    NOP
    NOP
    
    MOVIA       #0000B
    MOVAR       PRA             //SCAN_LINE
    NOP
    NOP
    
    //SET LED SCAN LINE (WHEN WRITE, SCAN LINE FIRST)
    MOVIA       #0001B
    MOVAR       PRA             //SCAN_LINE
    NOP
    NOP    
    
    MOVRA       LED_ROW_0
    MOVAR       PRB             //DATA_LINE
    NOP
    NOP
    
    //NEXT LED SCAN LINE
    MOVRA       LED_SCAN_LINE_COUNTER
    INCA
    MOVAR       LED_SCAN_LINE_COUNTER
    
    JMP         LED_SCAN_END
    
;------------------------------------------------------------------------------------------

LED_SCAN_LINE_1:

    //CLEAR DATA & SCAN LINE (WHEN CLEAR, DATA LINE FIRST)
    MOVIA       #1111B
    MOVAR       PRB             //DATA_LINE
    NOP
    NOP
    
    MOVIA       #0000B
    MOVAR       PRA             //SCAN_LINE
    NOP
    NOP
    
    //SET LED SCAN LINE (WHEN WRITE, SCAN LINE FIRST)
    MOVIA       #0010B
    MOVAR       PRA             //SCAN_LINE
    NOP
    NOP
    
    MOVRA       LED_ROW_1
    MOVAR       PRB             //DATA_LINE
    NOP
    NOP
    
    //NEXT LED SCAN LINE
    MOVRA       LED_SCAN_LINE_COUNTER
    INCA
    MOVAR       LED_SCAN_LINE_COUNTER
    
    JMP         LED_SCAN_END
    
;------------------------------------------------------------------------------------------

LED_SCAN_LINE_2:

    //CLEAR DATA & SCAN LINE (WHEN CLEAR, DATA LINE FIRST)
    MOVIA       #1111B
    MOVAR       PRB             //DATA_LINE
    NOP
    NOP
    
    MOVIA       #0000B
    MOVAR       PRA             //SCAN_LINE
    NOP
    NOP
    
    //SET LED SCAN LINE (WHEN WRITE, SCAN LINE FIRST)
    MOVIA       #0100B
    MOVAR       PRA             //SCAN_LINE
    NOP
    NOP
    
    MOVRA       LED_ROW_2
    MOVAR       PRB             //DATA_LINE
    NOP
    NOP
    
    //RESET LED_SCAN_LINE_COUNTER 
    MOVIA       0X00
    MOVAR       LED_SCAN_LINE_COUNTER     

;------------------------------------------------------------------------------------------

LED_SCAN_END:

    JMP         LED_SCAN_RET
    
;====================================================================================================

SET_KEY_SCAN_LINE_0:

    //SCAN_LINE_0 : OUTPUT    OTHERS : INPUT
    MOVIA       #1110B
    MOVAR       PRCIO 
    
    //SCAN_LINE_0 : FLOATING  OTHERS : PL
    MOVIA       #1110B
    MOVAR       PRCPL
    
    //SCAN_LINE_0 : HIGH      OTHERS : LOW
    MOVIA       #0001B
    MOVAR       PRC  
    
    //NEXT KEY SCAN LINE     
    MOVRA       KEY_SCAN_LINE_COUNTER
    INCA
    MOVAR       KEY_SCAN_LINE_COUNTER  
    
;------------------------------------------------------------------------------------------
    
SET_KEY_SCAN_LINE_0_END:

    RET   
       
;====================================================================================================

SET_KEY_SCAN_LINE_1:

    //SCAN_LINE_1 : OUTPUT    OTHERS : INPUT
    MOVIA       #1101B
    MOVAR       PRCIO
    
    //SCAN_LINE_1 : FLOATING  OTHERS : PL  
    MOVIA       #1101B
    MOVAR       PRCPL
    
    //SCAN_LINE_1 : HIGH      OTHER : LOW
    MOVIA       #0010B
    MOVAR       PRC
    
    //NEXT KEY SCAN LINE
    MOVRA       KEY_SCAN_LINE_COUNTER
    INCA
    MOVAR       KEY_SCAN_LINE_COUNTER 
    
;------------------------------------------------------------------------------------------
    
SET_KEY_SCAN_LINE_1_END:

    RET
    
;====================================================================================================

SET_KEY_SCAN_LINE_2:

    //SCAN_LINE_2 : OUTPUT    OTHERS : INTPUT
    MOVIA       #1011B    
    MOVAR       PRCIO
    
    //SCAN_LINE_2 : FLOATING  OTHERS : PL  
    MOVIA       #1011B
    MOVAR       PRCPL
    
    //SCAN_LINE_2 : HIGH      OTHERS : LOW 
    MOVIA       #0100B
    MOVAR       PRC
    
    //NEXT KEY SCAN LINE
    MOVRA       KEY_SCAN_LINE_COUNTER
    INCA
    MOVAR       KEY_SCAN_LINE_COUNTER 
    
;------------------------------------------------------------------------------------------
    
SET_KEY_SCAN_LINE_2_END:

    RET

;====================================================================================================  
    
KEY_CHANGE_OR_NOT:

    //NEW_KEY SAVE
    MOVRA       PRD
    MOVAR       NEW_KEY             //NEW_KEY NORMAL
    MOVAR       TMP0                //NEW_KEY TMP
    
    //KEY_CHANGE_OR_NOT
    MOVRA       OLD_KEY_TMP         
    XOR         TMP0                //OLD_KEY_TMP  XOR  TMP0(NEW_KEY TMP)
    
    MOVAR       WHICH_KEY_CHANGE    //RESULT  

    //RESET TMP0
    MOVIA       0X00
    MOVAR       TMP0
    
;------------------------------------------------------------------------------------------

KEY_CHANGE_OR_NOT_END:

    RET            

;====================================================================================================

PRESS_OR_RELEASE:                                   
    
    //PRESS_RESULT                                                
    MOVRA       NEW_KEY                             
    MOVAR       TMP0            //NEW_KEY(TMP)
    
    MOVRA       WHICH_KEY_CHANGE
    AND         TMP0            //WHICH_KEY_CHANGE  AND  NEW_KEY(TMP)
    MOVAR       PRESS_RESULT
    
    //RELEASE_RESULT
    MOVRA       OLD_KEY_TMP
    MOVAR       TMP0            //OLD_KEY(TMP)
    
    MOVRA       WHICH_KEY_CHANGE
    AND         TMP0            //WHICH_KEY_CHANGE  AND  OLD_KEY(TMP)  
    MOVAR       RELEASE_RESULT
    
    //RESET TMP0
    MOVIA       0X00
    MOVAR       TMP0
         
;------------------------------------------------------------------------------------------

PRESS_OR_RELEASE_END:

    RET    

;====================================================================================================

DECIMAL:

    MOVIA       0X00
    MOVAR       STATUS
    
    MOVRA       POINT_LOW0
    INCA
    MOVAR       POINT_LOW0
    
    MOVRA       POINT_LOW0
    SANEI       0X0A
    JMP         CARRY
    JMP         DECIMAL_END
    
CARRY:

    MOVIA       0X00
    MOVAR       POINT_LOW0

    MOVRA       POINT_LOW1    
    INCA
    MOVAR       POINT_LOW1
    
    MOVRA       POINT_LOW1
    SANEI       0X0A
    JMP         CARRY_1
    JMP         DECIMAL_END
    
CARRY_1:

    MOVIA       0X00
    MOVAR       POINT_LOW1

    MOVRA       POINT_MID0
    INCA
    MOVAR       POINT_MID0    

DECIMAL_END:

    RET

;==================================================================================================== 

GET_POINT:

    //表示得分 
    MOVRA       GAME_FLAG
    ORI         #0010B
    MOVAR       GAME_FLAG

    //AWESOME++
    MOVRA       AWESOME_CNT
    INCA
    MOVAR       AWESOME_CNT     
    
    //RESET IDIOT_CNT, SLOW_CNT
    MOVIA       0X00
    MOVAR       IDIOT_CNT
    MOVAR       SLOW_CNT

    //POINT++
    CALL        DECIMAL
          
;------------------------------------------------------------------------------------------

GET_POINT_END:
 
    RET

;====================================================================================================

LOSE_LIFE_POINT_OR_NOT:

    //表示按錯
    MOVRA       GAME_FLAG
    ORI         #0100B
    MOVAR       GAME_FLAG 

    //IDIOT++
    MOVRA       IDIOT_CNT
    INCA
    MOVAR       IDIOT_CNT
    
    //RESET AWESOME_CNT, SLOW_CNT
    MOVIA       0X00
    MOVAR       AWESOME_CNT
    MOVAR       SLOW_CNT         
    
    //MISCLICK++
    MOVRA       MISCLICK
    INCA
    MOVAR       MISCLICK
    
    //MISCLICK_HAPPENED_FLAG OPEN
    MOVRA       CONTROL_FLAG
    ORI         #0010B
    MOVAR       CONTROL_FLAG
    
    //LOSE_LIFE_POINT OR NOT
    MOVRA       MISCLICK
    SAEQI       0X02
    JMP         LOSE_LIFE_POINT_OR_NOT_END
    
    //LOSE_LIFE_POINT
    MOVRA       LIFE_POINT
    DECA
    MOVAR       LIFE_POINT
    
    //LIFE POINT LED CLOSE
    MOVRA       LIFE_POINT
    SANEI       0X00
    JMP         LIFE_0_POINT
    
    SANEI       0X01
    JMP         LIFE_1_POINT
    
    SANEI       0X02
    JMP         LIFE_2_POINT
    JMP         RESET_MISCLICK
    
LIFE_0_POINT: 

    MOVIA       #1111B
    MOVAR       LED_ROW_2 
    JMP         RESET_MISCLICK         

LIFE_1_POINT:

    MOVIA       #1011B
    MOVAR       LED_ROW_2  
    JMP         RESET_MISCLICK  

LIFE_2_POINT:

    MOVIA       #1001B
    MOVAR       LED_ROW_2  
    
RESET_MISCLICK:

    MOVIA       0X00
    MOVAR       MISCLICK 
    
LOSE_LIFE_POINT_OR_NOT_END:

    RET    

;====================================================================================================

LOSE_OR_NOT:

    //MISS CHECK
    MOVRA       MISS
    SANEI       0X05
    JMP         LOSE
                
    //LIFE POINT CHECK
    MOVRA       LIFE_POINT
    SANEI       0X00
    JMP         LOSE
    JMP         LOSE_OR_NOT_END
    
LOSE:

    //LOSE
    MOVRA       FINISH_FLAG
    ORI         #0010B
    MOVAR       FINISH_FLAG
    
LOSE_OR_NOT_END:

    RET    

;====================================================================================================

GAME_OVER: 

    //LED CLOSE
    MOVIA       #1111B
    MOVAR       LED_ROW_0       
    MOVAR       LED_ROW_1
    MOVAR       LED_ROW_2 
    
;------------------------------------------------------------------------------------------  
    
    //FINISH_FLAG  BIT1 : LOSE  BIT2 : APPEAR OVER(WIN) 
    MOVRA       FINISH_FLAG
    ANDI        #0000B
    MOVAR       FINISH_FLAG 
    
    //GAME_FLAG BIT0 : IN GAME  BIT1 : RIGHT  BIT2 : WRONG
    MOVRA       GAME_FLAG
    ANDI        #0000B
    MOVAR       GAME_FLAG 
    
    //CONTROL_FLAG BIT0 : RANDOM  BIT1 : MISCLICK FLAG  BIT 2 : FLASHING  BIT 3 : CAROUSEL
    MOVRA       CONTROL_FLAG
    ANDI        #0000B
    MOVAR       CONTROL_FLAG
    
    //RESET RANDOM_DELAY(等於清RANDOM_DELAY的FLAG)
    MOVIA       0X00
    MOVAR       RAND_DELAY_LOW0
    MOVAR       RAND_DELAY_LOW1
    MOVAR       RAND_DELAY_MID0
      
;------------------------------------------------------------------------------------------  

    //RESET MISCLICK TIME
    MOVIA       0X00
    MOVAR       MISCLICK
    
    //RESET MISS TIME
    MOVIA       0X00
    MOVAR       MISS
    
    //RESET CONTINUE COUNT
    MOVIA       0X00
    MOVAR       SLOW_CNT
    MOVAR       AWESOME_CNT
    MOVAR       IDIOT_CNT
    
    //RESET CURRENT APPEAR TIME
    MOVIA       0X00
    MOVAR       APPEAR_LOW0                
    MOVAR       APPEAR_LOW1    
    
;------------------------------------------------------------------------------------------      

    //RESET RETURN IDX
    MOVIA       0X00
    MOVAR       ADDRESS_INDEX    
    
GAME_OVER_END:     
    
    RET

;====================================================================================================

GAME_WIN:

    //LEVEL UP  
    MOVRA       LEVEL_COUNTER
    INCA    
    MOVAR       LEVEL_COUNTER
    
    //TURKEY OR NOT
    MOVRA       LEVEL_COUNTER
    SANEI       0X03
    JMP         TURKEY_1
    
;------------------------------------------------------------------------------------------ 

LIFE_POINT_INC:

    //LIFE_POINT++
    MOVRA       LIFE_POINT
    SANEI       0X03
    JMP         RESET_LEVEL
    
    MOVRA       LIFE_POINT
    INCA
    MOVAR       LIFE_POINT
    
    MOVRA       LIFE_POINT
    SANEI       0X02
    JMP         LIFE_POINT_2
    
    SANEI       0X03
    JMP         LIFE_POINT_3
    JMP         RESET_LEVEL       

LIFE_POINT_2:

    MOVIA       #1001B
    MOVAR       LED_ROW_2  
    JMP         RESET_LEVEL

LIFE_POINT_3:

    MOVIA       #1000B
    MOVAR       LED_ROW_2
    
;------------------------------------------------------------------------------------------
    
RESET_LEVEL:

    //LED CLOSE
    MOVIA       #1111B
    MOVAR       LED_ROW_0       
    MOVAR       LED_ROW_1
    
;------------------------------------------------------------------------------------------  
    
    //FINISH_FLAG  BIT0 : WIN  BIT1 : LOSE  BIT2 : APPEAR OVER
    MOVRA       FINISH_FLAG
    ANDI        #0000B
    MOVAR       FINISH_FLAG 
    
    //GAME_FLAG BIT0 : IN GAME  BIT1 : RIGHT  BIT2 : WRONG
    MOVRA       GAME_FLAG
    ANDI        #0000B
    MOVAR       GAME_FLAG 
    
    //CONTROL_FLAG BIT0 : RANDOM  BIT1 : MISCLICK FLAG  BIT 2 : FLASHING
    MOVRA       CONTROL_FLAG
    ANDI        #0000B
    MOVAR       CONTROL_FLAG
    
    //RESET RANDOM_DELAY(等於清RANDOM_DELAY的FLAG)
    MOVIA       0X00
    MOVAR       RAND_DELAY_LOW0
    MOVAR       RAND_DELAY_LOW1
    MOVAR       RAND_DELAY_MID0
      
;------------------------------------------------------------------------------------------  

    //RESET MISCLICK TIME
    MOVIA       0X00
    MOVAR       MISCLICK
    
    //RESET MISS TIME
    MOVIA       0X00
    MOVAR       MISS
    
    //RESET CONTINUE COUNT
    MOVIA       0X00
    MOVAR       SLOW_CNT
    MOVAR       AWESOME_CNT
    MOVAR       IDIOT_CNT
    
    //RESET CURRENT APPEAR TIME
    MOVIA       0X00
    MOVAR       APPEAR_LOW0                
    MOVAR       APPEAR_LOW1          
    
;------------------------------------------------------------------------------------------      

    //RESET RETURN IDX
    MOVIA       0X00
    MOVAR       ADDRESS_INDEX    
    
    JMP         GAME_WIN_END
    
;------------------------------------------------------------------------------------------ 
    
TURKEY_1:
    
    //FINISH_FLAG  BIT0 : WIN  BIT1 : LOSE  BIT2 : APPEAR OVER
    MOVRA       FINISH_FLAG
    ANDI        #0000B
    MOVAR       FINISH_FLAG 
    
    //GAME_FLAG BIT0 : IN GAME  BIT1 : RIGHT  BIT2 : WRONG
    MOVRA       GAME_FLAG
    ANDI        #0000B
    MOVAR       GAME_FLAG 
    
    //CONTROL_FLAG BIT0 : RANDOM  BIT1 : MISCLICK FLAG  BIT 2 : FLASHING
    MOVRA       CONTROL_FLAG
    ANDI        #0000B
    MOVAR       CONTROL_FLAG
    
    //RESET RANDOM_DELAY(等於清RANDOM_DELAY的FLAG)
    MOVIA       0X00
    MOVAR       RAND_DELAY_LOW0
    MOVAR       RAND_DELAY_LOW1
    MOVAR       RAND_DELAY_MID0
      
;------------------------------------------------------------------------------------------  

    //RESET MISCLICK TIME
    MOVIA       0X00
    MOVAR       MISCLICK
    
    //RESET MISS TIME
    MOVIA       0X00
    MOVAR       MISS
    
    //RESET CONTINUE COUNT
    MOVIA       0X00
    MOVAR       SLOW_CNT
    MOVAR       AWESOME_CNT
    MOVAR       IDIOT_CNT
    
    //RESET CURRENT APPEAR TIME
    MOVIA       0X00
    MOVAR       APPEAR_LOW0                
    MOVAR       APPEAR_LOW1          
    
;------------------------------------------------------------------------------------------      

    //RESET RETURN IDX
    MOVIA       0X00
    MOVAR       ADDRESS_INDEX 
    
;------------------------------------------------------------------------------------------

    CALL        ALL_LED_FLASHING
    
GAME_WIN_END:     
    
    RET

;====================================================================================================    
    
SET_RANDOM_DELAY:

    //RANDOM DISABLE, RANDOM_DELAY ENABLE
    MOVRA       CONTROL_FLAG
    ANDI        #1110B
    MOVAR       CONTROL_FLAG 

    //CHOOSE LEVEL DELAY
    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         L1_DELAY
    
    SANEI       0X01
    JMP         L2_DELAY
    
    SANEI       0X02
    JMP         L3_DELAY
    JMP         SET_RANDOM_DELAY_END
    
L1_DELAY:

    MOVIA       LOW0 LEVEL_1_DELAY
    MOVAR       RAND_DELAY_LOW0
    MOVIA       LOW1 LEVEL_1_DELAY
    MOVAR       RAND_DELAY_LOW1
    MOVIA       MID0 LEVEL_1_DELAY
    MOVAR       RAND_DELAY_MID0
    
    JMP         SET_RANDOM_DELAY_END

L2_DELAY:

    MOVIA       LOW0 LEVEL_2_DELAY
    MOVAR       RAND_DELAY_LOW0
    MOVIA       LOW1 LEVEL_2_DELAY
    MOVAR       RAND_DELAY_LOW1
    MOVIA       MID0 LEVEL_2_DELAY
    MOVAR       RAND_DELAY_MID0
    
    JMP         SET_RANDOM_DELAY_END

L3_DELAY:
    
    MOVIA       LOW0 LEVEL_3_DELAY
    MOVAR       RAND_DELAY_LOW0
    MOVIA       LOW1 LEVEL_3_DELAY
    MOVAR       RAND_DELAY_LOW1
    MOVIA       MID0 LEVEL_3_DELAY
    MOVAR       RAND_DELAY_MID0

;------------------------------------------------------------------------------------------  

SET_RANDOM_DELAY_END:

    RET

;====================================================================================================

APPEAR_TIME_COUNT:

    MOVIA       0X00
    MOVAR       STATUS

    MOVRA       APPEAR_LOW0 
    INCA
    MOVAR       APPEAR_LOW0
    
    MOVRA       APPEAR_LOW1
    MOVAR       TMP0
    ADC0        TMP0
    MOVRA       TMP0
    MOVAR       APPEAR_LOW1
    
    MOVIA       0X00
    MOVAR       TMP0

APPEAR_TIME_COUNT_END:

    RET

;====================================================================================================

APPEAR_TIME_CHECK:

    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         L1_APPEAR_TIME
    
    SANEI       0X01
    JMP         L2_APPEAR_TIME

    SANEI       0X02
    JMP         L3_APPEAR_TIME
    JMP         APPEAR_TIME_CHECK_END
    
L1_APPEAR_TIME:

    MOVRA       APPEAR_LOW0       
    SAEQI       LOW0 LEVEL_1_APPEAR_TIME
    JMP         APPEAR_TIME_CHECK_END
    
    MOVRA       APPEAR_LOW1       
    SAEQI       LOW1 LEVEL_1_APPEAR_TIME
    JMP         APPEAR_TIME_CHECK_END

APPEAR_OVER:

    //FINISH_FLAG BIT3 APPEAR OVER
    MOVRA       FINISH_FLAG
    ORI         #0100B
    MOVAR       FINISH_FLAG
    
    JMP         APPEAR_TIME_CHECK_END

L2_APPEAR_TIME:

    MOVRA       APPEAR_LOW0       
    SAEQI       LOW0 LEVEL_2_APPEAR_TIME
    JMP         APPEAR_TIME_CHECK_END
    
    MOVRA       APPEAR_LOW1       
    SAEQI       LOW1 LEVEL_2_APPEAR_TIME
    JMP         APPEAR_TIME_CHECK_END

APPEAR_OVER_1:

    //FINISH_FLAG BIT3 APPEAR OVER
    MOVRA       FINISH_FLAG
    ORI         #0100B
    MOVAR       FINISH_FLAG
    
    JMP         APPEAR_TIME_CHECK_END

L3_APPEAR_TIME:

    MOVRA       APPEAR_LOW0       
    SAEQI       LOW0 LEVEL_3_APPEAR_TIME
    JMP         APPEAR_TIME_CHECK_END
    
    MOVRA       APPEAR_LOW1       
    SAEQI       LOW1 LEVEL_3_APPEAR_TIME
    JMP         APPEAR_TIME_CHECK_END

APPEAR_OVER_2:

    //FINISH_FLAG BIT3 APPEAR OVER
    MOVRA       FINISH_FLAG
    ORI         #0100B
    MOVAR       FINISH_FLAG
    
    JMP         APPEAR_TIME_CHECK_END

APPEAR_TIME_CHECK_END:

    RET

;====================================================================================================

RANDOM:

    //RANDOM ENABLE OR RANDOM_DELAY ENABLE
    MOVRA       CONTROL_FLAG
    SAB1        #0001B
    JMP         RANDOM_DELAY
    JMP         WHICH_HAMSTER_LED_SHOULD_OPEN
    
;-----------------------------------------------
//CHOOSE HAMSTER

WHICH_HAMSTER_LED_SHOULD_OPEN:

    //APEAR TIME++, SET NEXT HAMSTER APPEAR TIME
    CALL        APPEAR_TIME_COUNT
    CALL        SET_RANDOM_DELAY

    MOVRA       RANDOM_VALUE
    SANEI       0X00
    JMP         HAMSTER_0
    
    SANEI       0X01
    JMP         HAMSTER_1

    SANEI       0X02
    JMP         HAMSTER_2
    
    SANEI       0X03
    JMP         HAMSTER_3

    SANEI       0X04
    JMP         HAMSTER_4

    SANEI       0X05
    JMP         HAMSTER_5
    JMP         HAMSTER_6
    
;-----------------------------------------------
//HAMSTER LED SET
    
HAMSTER_0:

    MOVIA       #1110B
    MOVAR       LED_ROW_0
    
    MOVIA       #1111B
    MOVAR       LED_ROW_1
    
    JMP         RANDOM_END
    
HAMSTER_1:

    MOVIA       #1101B
    MOVAR       LED_ROW_0
    
    MOVIA       #1111B
    MOVAR       LED_ROW_1
    
    JMP         RANDOM_END
    
HAMSTER_2:
    
    MOVIA       #1011B
    MOVAR       LED_ROW_0
    
    MOVIA       #1111B
    MOVAR       LED_ROW_1
    
    JMP         RANDOM_END
        
HAMSTER_3:

    MOVIA       #0111B
    MOVAR       LED_ROW_0
    
    MOVIA       #1111B
    MOVAR       LED_ROW_1
    
    JMP         RANDOM_END
    
HAMSTER_4:

    MOVIA       #1111B
    MOVAR       LED_ROW_0

    MOVIA       #1110B
    MOVAR       LED_ROW_1
    
    JMP         RANDOM_END 
    
HAMSTER_5:

    MOVIA       #1111B
    MOVAR       LED_ROW_0
        
    MOVIA       #1101B
    MOVAR       LED_ROW_1
    
    JMP         RANDOM_END
    
HAMSTER_6:

    MOVIA       #1111B
    MOVAR       LED_ROW_0

    MOVIA       #1011B
    MOVAR       LED_ROW_1
    
    JMP         RANDOM_END
    
;-----------------------------------------------
    
RANDOM_DELAY:

    //暫停時，直接出去(保險)
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         RANDOM_END

    MOVRA       GENERAL_2MS_TIMER
    SAB1        0X02
    JMP         RANDOM_END

SIGNAL_RISE_3:

    //RESET GENERAL_2MS_FLAG
    MOVRA       GENERAL_2MS_TIMER
    ANDI        #1101
    MOVAR       GENERAL_2MS_TIMER
    
    //IF ALL 0, END
    MOVRA       RAND_DELAY_MID0
    SAEQI       0X00
    JMP         COUNTDOWN_START_1
    
    MOVRA       RAND_DELAY_LOW1
    SAEQI       0X00
    JMP         COUNTDOWN_START_1
    
    MOVRA       RAND_DELAY_LOW0
    SAEQI       0X00
    JMP         COUNTDOWN_START_1
    JMP         RANDOM_END
    
COUNTDOWN_START_1:

    //RESET C_FLAG
    MOVIA       0X00
    MOVAR       STATUS 

    //COUNTDOWN
    MOVRA       RAND_DELAY_LOW0
    DECA
    MOVAR       RAND_DELAY_LOW0  
        
    MOVIA       0X00
    MOVAR       TMP3
    MOVRA       RAND_DELAY_LOW1
    SBC         TMP3
    MOVAR       RAND_DELAY_LOW1
    
    MOVIA       0X00
    MOVAR       TMP3
    MOVRA       RAND_DELAY_MID0
    SBC         TMP3
    MOVAR       RAND_DELAY_MID0
    
    //RESET TMP3
    MOVIA       0X00
    MOVAR       TMP3 
    
COUNTDOWN_FINISH_OR_NOT:
    
    MOVRA       RAND_DELAY_MID0
    SAEQI       0X00
    JMP         RANDOM_END
    
    MOVRA       RAND_DELAY_LOW1
    SAEQI       0X00
    JMP         RANDOM_END
    
    MOVRA       RAND_DELAY_LOW0
    SAEQI       0X00
    JMP         RANDOM_END  
    
;---------------------------------------
//CHECK MISS OR MISCLICK
    
CHECK_MISCLICK_ALREADY_HAPPENDED_OR_NOT:

    MOVRA       CONTROL_FLAG
    SAB1        #0010B
    JMP         MISCLICK_DIDNT_HAPPEND
    JMP         MISCLICK_ALREADY_HAPPEND
    
MISCLICK_ALREADY_HAPPEND:

    //亮完了沒 
    CALL        APPEAR_TIME_CHECK 
    
    MOVRA       FINISH_FLAG
    SAB0        #0100B
    //亮完了 
    JMP         RANDOM_END

    //還沒亮完 
    CALL        RANDOM_ENABLE_AND_MISCLICK_FLAG_CLOSE
    
    JMP         RANDOM_END
    
MISCLICK_DIDNT_HAPPEND:

    //MISCLICK DIDNT HAPPEND, SO MISS HAPPEND?  
    MOVRA       LED_ROW_0
    SAEQI       #1111B
    JMP         MISS_HAPPEND
    
    MOVRA       LED_ROW_1
    SAEQI       #1111B
    JMP         MISS_HAPPEND
    JMP         MISS_DIDNT_HAPPEND
    
MISS_HAPPEND:

    //SLOW++
    MOVRA       SLOW_CNT
    INCA
    MOVAR       SLOW_CNT

    //RESET IDIOT_CNT, AWESOME_CNT
    MOVIA       0X00
    MOVAR       IDIOT_CNT
    MOVAR       AWESOME_CNT

    //MISS++
    MOVRA       MISS
    INCA
    MOVAR       MISS 
    
    //檢查輸了沒 
    CALL        LOSE_OR_NOT
    
    MOVRA       FINISH_FLAG
    SAB0        #0010B
    //已經輸了 
    JMP         RANDOM_END
    
    //還沒輸 
    //亮完了沒 
    CALL        APPEAR_TIME_CHECK 
    
    MOVRA       FINISH_FLAG
    SAB0        #0100B
    //還沒輸但亮完了 
    JMP         RANDOM_END
    
    //還沒輸也還沒亮完
    CALL        RANDOM_ENABLE_AND_MISCLICK_FLAG_CLOSE 
    
    JMP         RANDOM_END
    
MISS_DIDNT_HAPPEND:

    //亮完了沒 
    CALL        APPEAR_TIME_CHECK 
    
    MOVRA       FINISH_FLAG
    SAB0        #0100B
    //亮完了 
    JMP         RANDOM_END

    //還沒亮完 
    CALL        RANDOM_ENABLE_AND_MISCLICK_FLAG_CLOSE
    
;------------------------------------------------------------------------------------------

RANDOM_END:

    JMP         RANDOM_RET
    
;====================================================================================================

RANDOM_ENABLE_AND_MISCLICK_FLAG_CLOSE:

    //RANDOM_ENABLE
    MOVRA       CONTROL_FLAG
    ORI         #0001B
    MOVAR       CONTROL_FLAG
    
    //RESET MISCLICK_HAPPENED_FLAG
    MOVRA       CONTROL_FLAG
    ANDI        #1101B
    MOVAR       CONTROL_FLAG
    
RANDOM_ENABLE_AND_MISCLICK_FLAG_CLOSE_END:

    RET   
    
;====================================================================================================

CURRENT_LEVEL_PLAY:

    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         CURRENT_LEVEL_IS_1
    
    SANEI       0X01
    JMP         CURRENT_LEVEL_IS_2
    
    SANEI       0X02
    JMP         CURRENT_LEVEL_IS_3
    JMP         CURRENT_LEVEL_PLAY_END
    
CURRENT_LEVEL_IS_1:

    MOVIA       LOW0 LEV1  
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEV1
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEV1
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEV1
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 LEV1
    MOVAR       TABLE_HIGH0
    
    JMP         CURRENT_LEVEL_PLAY_END

CURRENT_LEVEL_IS_2:

    MOVIA       LOW0 LEV2  
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEV2
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEV2
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEV2
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 LEV2
    MOVAR       TABLE_HIGH0
    
    JMP         CURRENT_LEVEL_PLAY_END

CURRENT_LEVEL_IS_3:    

    MOVIA       LOW0 LEV3  
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEV3
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEV3
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEV3
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 LEV3
    MOVAR       TABLE_HIGH0

CURRENT_LEVEL_PLAY_END:

    RET

;====================================================================================================  

KEY_SCAN:

    //FIRST TIME
    MOVRA       KEY_SCAN_LINE_COUNTER
    SAEQI       0X00
    JMP         CHOOSE_KEY_SCAN_LINE
    
;------------------------------------------------------------------------------------------
    
FIRST_TIME:

    CALL        SET_KEY_SCAN_LINE_0     
    JMP         KEY_SCAN_END
        
;------------------------------------------------------------------------------------------
    
CHOOSE_KEY_SCAN_LINE:
    
    MOVRA       KEY_SCAN_LINE_COUNTER
    SANEI       0X01
    JMP         KEY_SCAN_LINE_0
    
    SANEI       0X02
    JMP         KEY_SCAN_LINE_1
    
    SANEI       0X03
    JMP         KEY_SCAN_LINE_2
    
RESET_KEY_SCAN_LINE_COUNTER:

    MOVIA       0X01
    MOVAR       KEY_SCAN_LINE_COUNTER

;------------------------------------------------------------------------------------------   

KEY_SCAN_LINE_0:

    //SAVE OLD_KEY TO OLD_KEY_TMP
    MOVRA       OLD_KEY_0
    MOVAR       OLD_KEY_TMP
    
    CALL        KEY_CHANGE_OR_NOT
    
    MOVRA       WHICH_KEY_CHANGE
    SAEQI       0X00
    //IF KEY CHANGE
    JMP         KEY_DEBOUNCE
    
    //IF DONT, RESET KEY_DEBOUNCE_TIMER
    MOVIA       0X00
    MOVAR       KEY_DEBOUNCE_TIMER
    
    //NEXT SCAN LINE
    CALL        SET_KEY_SCAN_LINE_1     
    
    JMP         KEY_SCAN_END
    
KEY_SCAN_LINE_1:

    //SAVE OLD_KEY TO OLD_KEY_TMP
    MOVRA       OLD_KEY_1
    MOVAR       OLD_KEY_TMP
    
    CALL        KEY_CHANGE_OR_NOT
    
    MOVRA       WHICH_KEY_CHANGE
    SAEQI       0X00
    //IF KEY CHANGE
    JMP         KEY_DEBOUNCE
    
    //IF DONT, RESET KEY_DEBOUNCE_TIMER
    MOVIA       0X00
    MOVAR       KEY_DEBOUNCE_TIMER
    
    //NEXT SCAN LINE
    CALL        SET_KEY_SCAN_LINE_2     
    
    JMP         KEY_SCAN_END

KEY_SCAN_LINE_2:

    //SAVE OLD_KEY TO OLD_KEY_TMP
    MOVRA       OLD_KEY_2
    MOVAR       OLD_KEY_TMP
    
    CALL        KEY_CHANGE_OR_NOT
    
    MOVRA       WHICH_KEY_CHANGE
    SAEQI       0X00
    //IF KEY CHANGE
    JMP         KEY_DEBOUNCE
    
    //IF DONT, RESET KEY_DEBOUNCE_TIMER
    MOVIA       0X00
    MOVAR       KEY_DEBOUNCE_TIMER
    
    //NEXT SCAN LINE
    CALL        SET_KEY_SCAN_LINE_0
    
    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------

KEY_DEBOUNCE:

    MOVRA       KEY_DEBOUNCE_TIMER
    SAEQI       KEY_DEBOUNCE_DELAY
    //IF KEY_DEBOUNCE_TIMER IS COUNTING
    JMP         KEY_SCAN_END
    
    //IF KEY_DEBOUNCE_TIMER ARRIVE, RESET KEY_DEBOUNCE_TIMER 
    MOVIA       0X00
    MOVAR       KEY_DEBOUNCE_TIMER
    
;------------------------------------------------------------------------------------------
    
WHICH_OLD_KEY_NEED_TO_SAVE:

    MOVRA       KEY_SCAN_LINE_COUNTER
    SANEI       0X01
    JMP         SAVE_OLD_KEY_0
    
    SANEI       0X02
    JMP         SAVE_OLD_KEY_1
    JMP         SAVE_OLD_KEY_2
    
;------------------------------------------------------------------------------------------
    
SAVE_OLD_KEY_0:

    //NEXT KEY SCAN LINE
    CALL        SET_KEY_SCAN_LINE_1   
    
    CALL        PRESS_OR_RELEASE
    
    MOVRA       NEW_KEY
    MOVAR       OLD_KEY_0
    
;------------------------------------------------------------- 
    
    //CHOOSE LEVEL ENABLE OR NOT
    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         KEY_SCAN_LINE_0_PRESS_OR_RELEASE_BRANCH_TABLE 
    
;-------------------------------------------------------------               
    
    //IN GAME OR NOT(HAMSTER KEY ENABLE OR DISABLE)
    MOVRA       GAME_FLAG
    SAB1        #0001B
    //NOT IN GAME
    JMP         KEY_SCAN_END
    //IN GAME
    JMP         KEY_SCAN_LINE_0_PRESS_OR_RELEASE_BRANCH_TABLE     

SAVE_OLD_KEY_1:

    //NEXT KEY SCAN LINE
    CALL        SET_KEY_SCAN_LINE_2
    
    CALL        PRESS_OR_RELEASE
    
    MOVRA       NEW_KEY
    MOVAR       OLD_KEY_1 
    
;------------------------------------------------------------- 

    //CHOOSE LEVEL ENABLE OR NOT
    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         KEY_SCAN_LINE_1_PRESS_OR_RELEASE_BRANCH_TABLE 

;-------------------------------------------------------------

    //IN GAME OR NOT(HAMSTER KEY ENABLE OR DISABLE)
    MOVRA       GAME_FLAG
    SAB1        #0001B
    //NOT IN GAME
    JMP         KEY_SCAN_END
    //IN GAME
    JMP         KEY_SCAN_LINE_1_PRESS_OR_RELEASE_BRANCH_TABLE 

SAVE_OLD_KEY_2:

    //NEXT KEY SCAN LINE
    CALL        SET_KEY_SCAN_LINE_0
    
    CALL        PRESS_OR_RELEASE
    
    MOVRA       NEW_KEY
    MOVAR       OLD_KEY_2 

    JMP         KEY_SCAN_LINE_2_PRESS_OR_RELEASE_BRANCH_TABLE
    
;------------------------------------------------------------------------------------------ 

KEY_SCAN_LINE_0_PRESS_OR_RELEASE_BRANCH_TABLE: 

    //PRESS LINE0_KEY0
    MOVRA       PRESS_RESULT
    SAB0        0X01
    JMP         LINE0_KEY0_PRESS_ACTION             

    //PRESS LINE0_KEY1
    MOVRA       PRESS_RESULT
    SAB0        0X02
    JMP         LINE0_KEY1_PRESS_ACTION 

    //PRESS LINE0_KEY2
    MOVRA       PRESS_RESULT
    SAB0        0X04
    JMP         LINE0_KEY2_PRESS_ACTION 

    //PRESS LINE0_KEY3
    MOVRA       PRESS_RESULT
    SAB0        0X08
    JMP         LINE0_KEY3_PRESS_ACTION 

;------------------------------------------------------------------------------------------ 

    //RELEASE LINE0_KEY0
    NOP

    //RELEASE LINE0_KEY1
    NOP

    //RELEASE LINE0_KEY2
    NOP

    //RELEASE LINE0_KEY3 
    NOP
    
    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------    

KEY_SCAN_LINE_1_PRESS_OR_RELEASE_BRANCH_TABLE: 

    //PRESS LINE1_KEY0
    MOVRA       PRESS_RESULT
    SAB0        0X01
    JMP         LINE1_KEY0_PRESS_ACTION
    
    //PRESS LINE1_KEY1
    MOVRA       PRESS_RESULT
    SAB0        0X02
    JMP         LINE1_KEY1_PRESS_ACTION

    //PRESS LINE1_KEY2
    MOVRA       PRESS_RESULT
    SAB0        0X04
    JMP         LINE1_KEY2_PRESS_ACTION 
    
;------------------------------------------------------------------------------------------ 

    //RELEASE LINE1_KEY0
    NOP

    //RELEASE LINE1_KEY1
    NOP

    //RELEASE LINE1_KEY2
    NOP
    
    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------ 

KEY_SCAN_LINE_2_PRESS_OR_RELEASE_BRANCH_TABLE: 

    //PRESS LINE2_KEY0
    MOVRA       PRESS_RESULT
    SAB0        0X01
    JMP         LINE2_KEY0_PRESS_ACTION

    //PRESS LINE2_KEY1
    MOVRA       PRESS_RESULT
    SAB0        0X02
    JMP         LINE2_KEY1_PRESS_ACTION

;------------------------------------------------------------------------------------------ 

    //RELEASE LINE2_KEY0
    NOP

    //RELEASE LINE2_KEY1
    MOVRA       RELEASE_RESULT
    SAB0        0X02
    JMP         LINE2_KEY1_RELEASE_ACTION

    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------
//LINE0 KEY PRESS ACTION

LINE0_KEY0_PRESS_ACTION: 

    //暫停時按KEY播報分數及關卡 
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         PLAY_SCORE_AND_LEVEL 

    //LEVEL CHOOSE BACKWORD KEY
    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         BACKWORD

;---------------------------------------- 
//GAME FUNCTION    

    MOVRA       LED_ROW_0
    SAB1        #0001B
    JMP         RIGHT_CLICK_LINE0_KEY0
    JMP         WRONG_CLICK_LINE0_KEY0

RIGHT_CLICK_LINE0_KEY0:

    MOVRA       LED_ROW_0
    ORI         #0001B
    MOVAR       LED_ROW_0       
    
    CALL        GET_POINT
    JMP         KEY_SCAN_END

WRONG_CLICK_LINE0_KEY0:

    CALL        LOSE_LIFE_POINT_OR_NOT
    CALL        LOSE_OR_NOT    
    JMP         KEY_SCAN_END
    
;----------------------------------------
//LEVEL CHOOSE

BACKWORD:

    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         RESET_LEVEL_CNT

    MOVRA       LEVEL_COUNTER       
    DECA
    MOVAR       LEVEL_COUNTER
    
    CALL        CURRENT_LEVEL_PLAY
    
    JMP         KEY_SCAN_END
    
RESET_LEVEL_CNT:

    MOVIA       0X02
    MOVAR       LEVEL_COUNTER
    
    CALL        CURRENT_LEVEL_PLAY
    
    JMP         KEY_SCAN_END
    
;------------------------------------------------------------------------------------------

LINE0_KEY1_PRESS_ACTION:

    //暫停時按KEY播報分數及關卡 
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         PLAY_SCORE_AND_LEVEL 

    //LEVEL CHOOSE NO ACTION KEY
    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         KEY_SCAN_END

;---------------------------------------- 
//GAME FUNCTION 

    MOVRA       LED_ROW_0
    SAB1        #0010B
    JMP         RIGHT_CLICK_LINE0_KEY1
    JMP         WRONG_CLICK_LINE0_KEY1

RIGHT_CLICK_LINE0_KEY1:

    MOVRA       LED_ROW_0
    ORI         #0010B
    MOVAR       LED_ROW_0

    CALL        GET_POINT
    JMP         KEY_SCAN_END

WRONG_CLICK_LINE0_KEY1:

    CALL        LOSE_LIFE_POINT_OR_NOT
    CALL        LOSE_OR_NOT    
    JMP         KEY_SCAN_END
    
;------------------------------------------------------------------------------------------

LINE0_KEY2_PRESS_ACTION:

    //暫停時按KEY播報分數及關卡 
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         PLAY_SCORE_AND_LEVEL 

    //LEVEL CHOOSE NO ACTION KEY
    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         KEY_SCAN_END

;---------------------------------------- 
//GAME FUNCTION

    MOVRA       LED_ROW_0
    SAB1        #0100B
    JMP         RIGHT_CLICK_LINE0_KEY2
    JMP         WRONG_CLICK_LINE0_KEY2

RIGHT_CLICK_LINE0_KEY2:

    MOVRA       LED_ROW_0
    ORI         #0100B
    MOVAR       LED_ROW_0

    CALL        GET_POINT
    JMP         KEY_SCAN_END

WRONG_CLICK_LINE0_KEY2:

    CALL        LOSE_LIFE_POINT_OR_NOT
    CALL        LOSE_OR_NOT    
    JMP         KEY_SCAN_END
    
;------------------------------------------------------------------------------------------

LINE0_KEY3_PRESS_ACTION:

    //暫停時按KEY播報分數及關卡 
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         PLAY_SCORE_AND_LEVEL 

    //LEVEL CHOOSE LEVEL UP KEY
    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         LEVEL_UP
    
;------------------------------------------------------------------------------------------
//GAME FUNCTION 
     
    MOVRA       LED_ROW_0
    SAB1        #1000B
    JMP         RIGHT_CLICK_LINE0_KEY3
    JMP         WRONG_CLICK_LINE0_KEY3

RIGHT_CLICK_LINE0_KEY3:

    MOVRA       LED_ROW_0
    ORI         #1000B
    MOVAR       LED_ROW_0

    CALL        GET_POINT   
    JMP         KEY_SCAN_END

WRONG_CLICK_LINE0_KEY3:

    CALL        LOSE_LIFE_POINT_OR_NOT 
    CALL        LOSE_OR_NOT  
    JMP         KEY_SCAN_END
    
;------------------------------------------------------------------------------------------
    
LEVEL_UP:

    MOVRA       LEVEL_COUNTER
    SANEI       0X02
    JMP         RESET_LEVEL_CNT_1

    MOVRA       LEVEL_COUNTER       
    INCA
    MOVAR       LEVEL_COUNTER
    
    CALL        CURRENT_LEVEL_PLAY
    
    JMP         KEY_SCAN_END
    
RESET_LEVEL_CNT_1:

    MOVIA       0X00
    MOVAR       LEVEL_COUNTER
    
    CALL        CURRENT_LEVEL_PLAY
    
    JMP         KEY_SCAN_END
    
;------------------------------------------------------------------------------------------
//LINE0 KEY RELEASE ACTION
    
LINE0_KEY0_RELEASE_ACTION:

    NOP
    JMP         KEY_SCAN_END

LINE0_KEY1_RELEASE_ACTION:

    NOP
    JMP         KEY_SCAN_END

LINE0_KEY2_RELEASE_ACTION:

    NOP
    JMP         KEY_SCAN_END

LINE0_KEY3_RELEASE_ACTION:

    NOP
    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------
//LINE1 KEY PRESS ACTION

LINE1_KEY0_PRESS_ACTION:

    //暫停時按KEY播報分數及關卡 
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         PLAY_SCORE_AND_LEVEL 

    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         KEY_SCAN_END

;---------------------------------------- 
//GAME FUNCTION

    MOVRA       LED_ROW_1
    SAB1        #0001B
    JMP         RIGHT_CLICK_LINE1_KEY0
    JMP         WRONG_CLICK_LINE1_KEY0

RIGHT_CLICK_LINE1_KEY0:

    MOVRA       LED_ROW_1
    ORI         #0001B
    MOVAR       LED_ROW_1

    CALL        GET_POINT
    JMP         KEY_SCAN_END

WRONG_CLICK_LINE1_KEY0:

    CALL        LOSE_LIFE_POINT_OR_NOT 
    CALL        LOSE_OR_NOT   
    JMP         KEY_SCAN_END
    
;------------------------------------------------------------------------------------------

LINE1_KEY1_PRESS_ACTION:

    //暫停時按KEY播報分數及關卡 
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         PLAY_SCORE_AND_LEVEL 

    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         SILENCE

;---------------------------------------- 
//GAME FUNCTION

    MOVRA       LED_ROW_1
    SAB1        #0010B
    JMP         RIGHT_CLICK_LINE1_KEY1
    JMP         WRONG_CLICK_LINE1_KEY1

RIGHT_CLICK_LINE1_KEY1:

    MOVRA       LED_ROW_1
    ORI         #0010B
    MOVAR       LED_ROW_1
    
    CALL        GET_POINT
    JMP         KEY_SCAN_END

WRONG_CLICK_LINE1_KEY1:

    CALL        LOSE_LIFE_POINT_OR_NOT  
    CALL        LOSE_OR_NOT 
    JMP         KEY_SCAN_END
    
;----------------------------------------     
    
SILENCE:

    MOVRA       STOP_FLAG
    SAB0        #0010B                
    JMP         SILENCE_DISABLE
    JMP         SILENCE_ENABLE  
    
SILENCE_ENABLE:

    MOVRA       STOP_FLAG
    ORI         #0010B
    MOVAR       STOP_FLAG

    JMP         KEY_SCAN_END

SILENCE_DISABLE:

    MOVIA       LOW0 SILENCE_VOICE   
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SILENCE_VOICE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SILENCE_VOICE
    MOVAR       TABLE_MID0
    MOVIA       MID1 SILENCE_VOICE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SILENCE_VOICE
    MOVAR       TABLE_HIGH0

    JMP         KEY_SCAN_END
    
;------------------------------------------------------------------------------------------

LINE1_KEY2_PRESS_ACTION:

    //暫停時按KEY播報分數及關卡 
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         PLAY_SCORE_AND_LEVEL 

    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         KEY_SCAN_END

;---------------------------------------- 
//GAME FUNCTION

    MOVRA       LED_ROW_1
    SAB1        #0100B
    JMP         RIGHT_CLICK_LINE1_KEY2
    JMP         WRONG_CLICK_LINE1_KEY2

RIGHT_CLICK_LINE1_KEY2:

    MOVRA       LED_ROW_1
    ORI         #0100B
    MOVAR       LED_ROW_1

    CALL        GET_POINT
    JMP         KEY_SCAN_END

WRONG_CLICK_LINE1_KEY2:

    CALL        LOSE_LIFE_POINT_OR_NOT  
    CALL        LOSE_OR_NOT 
    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------
//LINE1 KEY RELEASE ACTION

LINE1_KEY0_RELEASE_ACTION:

    NOP
    JMP         KEY_SCAN_END

LINE1_KEY1_RELEASE_ACTION:

    NOP
    JMP         KEY_SCAN_END

LINE1_KEY2_RELEASE_ACTION:

    NOP
    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------
//LINE2 KEY PRESS ACTION

LINE2_KEY0_PRESS_ACTION://開機

    //如果已開機，此鍵作暫停功能
    MOVRA       KEY_ROW_2
    SAB0        #0001B
    JMP         PAUSE_OR_NOT

    //如果正在選關，此鍵作確認關卡功能 
    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         LEVEL_CONFIRM    
    
;--------------------------------------    
//如果都沒有，此鍵作開機功能     

    //CLEAR ALL
    CALL        CLEAR_ALL
                          
    //BOOT DECODE ENABLE
    MOVRA       KEY_ROW_2
    ORI         #0001B
    MOVAR       KEY_ROW_2
    
    //READ ORIGINAL BOOT TABLE ADDRESS
    MOVIA       LOW0 BOOT_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 BOOT_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 BOOT_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 BOOT_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 BOOT_TABLE
    MOVAR       TABLE_HIGH0
    
    JMP         KEY_SCAN_END
    
;--------------------------------------
    
LEVEL_CONFIRM:

    CALL        LEVEL_GO
    
    JMP         KEY_SCAN_END 
    
;-------------------------------------- 
    
PAUSE_OR_NOT:

    //如果FLOW正在暫停或繼續TABLE，直接離開 
    MOVRA       GAME_FLAG
    SAB0        #1000B
    JMP         KEY_SCAN_END

    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         GAME_RESUME
    JMP         GAME_PAUSE
           
GAME_PAUSE: 

    //防打斷FLAG OPEN 
    MOVRA       GAME_FLAG
    ORI         #1000B
    MOVAR       GAME_FLAG 

    //存回去的位址 
    MOVRA       TABLE_LOW0       
    MOVAR       RET_TMP_1_LOW0
    MOVRA       TABLE_LOW1
    MOVAR       RET_TMP_1_LOW1
    MOVRA       TABLE_MID0
    MOVAR       RET_TMP_1_MID0
    MOVRA       TABLE_MID1
    MOVAR       RET_TMP_1_MID1
    MOVRA       TABLE_HIGH0 
    MOVAR       RET_TMP_1_HIGH0  
    
    //暫停FLOW 
    MOVIA       LOW0 PAUSE_VOICE   
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 PAUSE_VOICE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 PAUSE_VOICE
    MOVAR       TABLE_MID0
    MOVIA       MID1 PAUSE_VOICE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 PAUSE_VOICE
    MOVAR       TABLE_HIGH0
    
    JMP         KEY_SCAN_END
    
GAME_RESUME:

    //流程恢復通行 
    MOVRA       CONTROL_FLAG_2
    ANDI        #1110B
    MOVAR       CONTROL_FLAG_2

    //防打斷FLAG OPEN 
    MOVRA       GAME_FLAG
    ORI         #1000B
    MOVAR       GAME_FLAG

    MOVIA       LOW0 RESUME_VOICE   
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 RESUME_VOICE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 RESUME_VOICE
    MOVAR       TABLE_MID0
    MOVIA       MID1 RESUME_VOICE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 RESUME_VOICE
    MOVAR       TABLE_HIGH0
    
    JMP         KEY_SCAN_END
    
;--------------------------------------  
    
LINE2_KEY1_PRESS_ACTION://選關OR關機 

    //關機計時開始
    MOVRA       CONTROL_FLAG_2
    ORI         #0010B              
    MOVAR       CONTROL_FLAG_2 
    
    MOVIA       LOW0 TURN_OFF_TIME
    MOVAR       TURN_OFF_DELAY_LOW0
    MOVIA       LOW1 TURN_OFF_TIME
    MOVAR       TURN_OFF_DELAY_LOW1
    MOVIA       MID0 TURN_OFF_TIME
    MOVAR       TURN_OFF_DELAY_MID0

    //遊戲中，不能進                              
    MOVRA       KEY_ROW_2
    SAB0        #0001B
    JMP         KEY_SCAN_END     
    
;--------------------------------------
//非遊戲中，可以選關  

    //避免連按打斷 
    MOVRA       CONTROL_FLAG
    SAB0        #1000B
    JMP         KEY_SCAN_END   

    //CLEAR ALL
    CALL        CLEAR_ALL

    //CHOOSE LEVEL DECODE ENABLE
    MOVRA       KEY_ROW_2
    ORI         #0010B
    MOVAR       KEY_ROW_2
    
    MOVIA       LOW0 CHOOSE_LEVEL
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 CHOOSE_LEVEL
    MOVAR       TABLE_LOW1
    MOVIA       MID0 CHOOSE_LEVEL
    MOVAR       TABLE_MID0
    MOVIA       MID1 CHOOSE_LEVEL
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 CHOOSE_LEVEL
    MOVAR       TABLE_HIGH0
    
    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------
//LINE2 KEY RELEASE ACTION

LINE2_KEY0_RELEASE_ACTION:

    NOP
    JMP         KEY_SCAN_END

LINE2_KEY1_RELEASE_ACTION:

    //關機計時結束 
    MOVRA       CONTROL_FLAG_2
    ANDI        #1101B
    MOVAR       CONTROL_FLAG_2
    
    //重置計時器 
    MOVIA       0X00
    MOVAR       TURN_OFF_DELAY_LOW0
    MOVAR       TURN_OFF_DELAY_LOW1
    MOVAR       TURN_OFF_DELAY_MID0
    
    JMP         KEY_SCAN_END

;------------------------------------------------------------------------------------------
//SPECIAL_CASE

PLAY_SCORE_AND_LEVEL:

    MOVRA       CONTROL_FLAG_2
    ANDI        #1110B
    MOVAR       CONTROL_FLAG_2

    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         NUM_1X
    
    SANEI       0X01
    JMP         NUM_2X
    
    SANEI       0X02
    JMP         NUM_3X
    JMP         KEY_SCAN_END
    
NUM_1X:

    MOVIA       LOW0 NO_1
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 NO_1
    MOVAR       TABLE_LOW1                                                                                        
    MOVIA       MID0 NO_1
    MOVAR       TABLE_MID0
    MOVIA       MID1 NO_1
    MOVAR       TABLE_MID1
    MOVIA       HIGH1 NO_1
    MOVAR       TABLE_HIGH0
    
    JMP         KEY_SCAN_END

NUM_2X:

    MOVIA       LOW0 NO_2
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 NO_2
    MOVAR       TABLE_LOW1
    MOVIA       MID0 NO_2
    MOVAR       TABLE_MID0
    MOVIA       MID1 NO_2
    MOVAR       TABLE_MID1
    MOVIA       HIGH1 NO_2
    MOVAR       TABLE_HIGH0

    JMP         KEY_SCAN_END

NUM_3X:

    MOVIA       LOW0 NO_3
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 NO_3
    MOVAR       TABLE_LOW1
    MOVIA       MID0 NO_3
    MOVAR       TABLE_MID0
    MOVIA       MID1 NO_3
    MOVAR       TABLE_MID1
    MOVIA       HIGH1 NO_3
    MOVAR       TABLE_HIGH0

KEY_SCAN_END:

    JMP         KEY_SCAN_RET

;====================================================================================================

LEVEL_GO:

    MOVIA       0X0F
    MOVAR       LED_ROW_0
    MOVAR       LED_ROW_1 

    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         NO_1_GO
    
    SANEI       0X01
    JMP         NO_2_GO
    
    SANEI       0X02
    JMP         NO_3_GO
    JMP         LEVEL_GO_END
    
NO_1_GO:

    MOVIA       LOW0 LEVEL_1_TABLE  
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEVEL_1_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEVEL_1_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEVEL_1_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 LEVEL_1_TABLE
    MOVAR       TABLE_HIGH0
    
    JMP         LEVEL_GO_END

NO_2_GO:

    MOVIA       LOW0 LEVEL_2_TABLE 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEVEL_2_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEVEL_2_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEVEL_2_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 LEVEL_2_TABLE
    MOVAR       TABLE_HIGH0
    
    JMP         LEVEL_GO_END

NO_3_GO:

    MOVIA       LOW0 LEVEL_3_TABLE 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEVEL_3_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEVEL_3_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEVEL_3_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 LEVEL_3_TABLE
    MOVAR       TABLE_HIGH0
    
    JMP         LEVEL_GO_END

LEVEL_GO_END:

    RET
    
;====================================================================================================

BOOT:       

    //是否開機 
    MOVRA       KEY_ROW_2
    SAB0        #0001B
    JMP         BOOT_ENABLE
    
    //是否選關 
    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         BOOT_ENABLE
    JMP         BOOT_END
    
BOOT_ENABLE:

    JMP         DECODE
                DECODE_RET:

;------------------------------------------------------------------------------------------
 
BOOT_END:

    JMP         BOOT_RET     

;====================================================================================================

TABLE_ADDRESS_INC:

    //RESET C_FLAG
    MOVIA       0X00
    MOVAR       STATUS
    
    //NEXT TABLE FLOW
    MOVRA       TABLE_LOW0
    INCA
    MOVAR       TABLE_LOW0
    
    MOVRA       TABLE_LOW1
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       TABLE_LOW1
    
    MOVRA       TABLE_MID0
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       TABLE_MID0
    
    MOVRA       TABLE_MID1
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       TABLE_MID1
    
    MOVRA       TABLE_HIGH0
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       TABLE_HIGH0
    
    //RESET TMP2      
    MOVIA       0X00
    MOVAR       TMP2      
    
;------------------------------------------------------------------------------------------
          
TABLE_ADDRESS_INC_END:

    RET    

;====================================================================================================

VOICE_ADDRESS_INC:

    //RESET C_FLAG
    MOVIA       0X00
    MOVAR       STATUS

    //NEXT VOICE TABLE FLOW
    MOVRA       VOICE_TABLE_LOW0 
    INCA
    MOVAR       VOICE_TABLE_LOW0
    
    MOVRA       VOICE_TABLE_LOW1
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       VOICE_TABLE_LOW1       
    
    MOVRA       VOICE_TABLE_MID0
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       VOICE_TABLE_MID0
    
    MOVRA       VOICE_TABLE_MID1
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       VOICE_TABLE_MID1
    
    MOVRA       VOICE_TABLE_HIGH0       
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       VOICE_TABLE_HIGH0
    
    //RESET TMP2      
    MOVIA       0X00
    MOVAR       TMP2
    
;------------------------------------------------------------------------------------------                   

VOICE_ADDRESS_INC_END:

    RET

;====================================================================================================

READ_CURRENT_TABLE:

    MOVRA       TABLE_LOW0
    MOVAR       TREG0
    MOVRA       TABLE_LOW1
    MOVAR       TREG1
    MOVRA       TABLE_MID0
    MOVAR       TREG2
    MOVRA       TABLE_MID1
    MOVAR       TREG3
    MOVRA       TABLE_HIGH0
    MOVAR       TREG4

;------------------------------------------------------------------------------------------                   
    
READ_CURRENT_TABLE_END:

    RET

;====================================================================================================

READ_VOICE_TABLE:

    MOVRA       VOICE_TABLE_LOW0
    MOVAR       TREG0
    MOVRA       VOICE_TABLE_LOW1
    MOVAR       TREG1
    MOVRA       VOICE_TABLE_MID0
    MOVAR       TREG2
    MOVRA       VOICE_TABLE_MID1
    MOVAR       TREG3
    MOVRA       VOICE_TABLE_HIGH0
    MOVAR       TREG4
    
;------------------------------------------------------------------------------------------                   
    
READ_VOICE_TABLE_END:

    RET
    
;====================================================================================================

CLOSE_INTERRUPT:

    MOVRA       PERI
    ANDI        #1110B 									
    MOVAR       PERI
    
;------------------------------------------------------------------------------------------

CLOSE_INTERRUPT_END:

    RET

;====================================================================================================

OPEN_INTERRUPT:

    MOVRA       PERI
    ORI         #0001B 									
    MOVAR       PERI
    
;------------------------------------------------------------------------------------------

OPEN_INTERRUPT_END:

    RET

;====================================================================================================

RIGHT_ADDRESS:

    MOVIA       LOW0 RIGHT
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 RIGHT
    MOVAR       TABLE_LOW1
    MOVIA       MID0 RIGHT
    MOVAR       TABLE_MID0
    MOVIA       MID1 RIGHT
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 RIGHT
    MOVAR       TABLE_HIGH0
    
RIGHT_ADDRESS_END:

    RET

;====================================================================================================

WRONG_ADDRESS:

    MOVIA       LOW0 WRONG
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 WRONG
    MOVAR       TABLE_LOW1
    MOVIA       MID0 WRONG
    MOVAR       TABLE_MID0
    MOVIA       MID1 WRONG
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 WRONG
    MOVAR       TABLE_HIGH0
    
WRONG_ADDRESS_END:

    RET
    
;====================================================================================================

WIN_ADDRESS:

    MOVIA       LOW0 U_WIN
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_WIN
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_WIN
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_WIN
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 U_WIN
    MOVAR       TABLE_HIGH0  
    
WIN_ADDRESS_END:  

    RET

;==================================================================================================== 

LOSE_ADDRESS:

    MOVIA       LOW0 U_LOSE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_LOSE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_LOSE
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_LOSE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 U_LOSE
    MOVAR       TABLE_HIGH0    
    
LOSE_ADDRESS_END:

    RET

;====================================================================================================

AWESOME_ADDRESS:
    
    //SWITCH FLOW    
    MOVIA       LOW0 AWESOME_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 AWESOME_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 AWESOME_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 AWESOME_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 AWESOME_TABLE
    MOVAR       TABLE_HIGH0
    
AWESOME_ADDRESS_END:

    RET
    
;====================================================================================================

IDIOT_ADDRESS:

    //SWITCH FLOW    
    MOVIA       LOW0 IDIOT_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 IDIOT_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 IDIOT_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 IDIOT_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 IDIOT_TABLE
    MOVAR       TABLE_HIGH0

IDIOT_ADDRESS_END:

    RET

;====================================================================================================

SLOW_ADDRESS:

    //SWITCH FLOW    
    MOVIA       LOW0 SLOW_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SLOW_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SLOW_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 SLOW_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SLOW_TABLE
    MOVAR       TABLE_HIGH0   

SLOW_ADDRESS_END:

    RET

;====================================================================================================

DECODE:

    MOVRA       CONTROL_FLAG_2
    SAB0        #0001B
    JMP         DECODE_END        
                   
    //出現完畢(WIN)
    MOVRA       FINISH_FLAG
    SAB0        #0100B
    JMP         APPEAR_FINISH
    
    //輸遊戲 
    MOVRA       FINISH_FLAG
    SAB0        #0010B
    JMP         LOSE_GAME
    
;------------------------------------
    
    //你好棒 
    MOVRA       AWESOME_CNT
    SANEI       AWESOME_TIME
    JMP         AWESOME_SOUND
    
    //你好笨
    MOVRA       IDIOT_CNT
    SANEI       IDIOT_TIME                
    JMP         IDIOT_SOUND
     
    //你好慢
    MOVRA       SLOW_CNT
    SANEI       SLOW_TIME
    JMP         SLOW_SOUND 
    
;------------------------------------

    //答對 
    MOVRA       GAME_FLAG
    SAB0        #0010B
    JMP         RIGHT_SOUND
    
    //答錯 
    MOVRA       GAME_FLAG
    SAB0        #0100B
    JMP         WRONG_SOUND  
    
;-------------------------------------

    //DELAY 
    MOVRA       STOP_FLAG
    SAB0        #0001B        
    JMP         DECODE_END
    
    //播背景音樂 
    MOVRA       R@PlayVFlag
    SANEI       #0001B       
    JMP         DECODE_END  
    JMP         GOGO
    
;--------------------------------------------------------------------------  

APPEAR_FINISH:

    //聲音停止播放 
    MOVIA       0X00
    MOVAR       R@PlayVFlag
    
    //是否有答對音 
    MOVRA       GAME_FLAG                             
    SAB0        #0010B
    JMP         A0
    
    //是否有答錯音
    MOVRA       GAME_FLAG
    SAB0        #0100B
    JMP         A1
    
    //是否 MISS 3 次 
    MOVRA       SLOW_CNT
    SANEI       SLOW_TIME
    JMP         A2 
    
    //都沒有
    JMP         NOTHING 
    
A0:
 
    //是否有你好棒 
    MOVRA       AWESOME_CNT
    SANEI       AWESOME_TIME
    //答對+你好棒+贏 
    JMP         A3          
    //答對+贏 
    JMP         A5      
    
A1:
    
    //是否有你好笨                            
    MOVRA       IDIOT_CNT
    SANEI       IDIOT_TIME
    //答錯+你好笨+贏 
    JMP         A4
    //答錯+贏 
    JMP         A6

A2:

    //你好慢+贏 
    MOVIA       LOW0 U_WIN_5 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_WIN_5 
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_WIN_5 
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_WIN_5 
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 U_WIN_5 
    MOVAR       TABLE_HIGH0 
    
    //RESET 你好慢 
    MOVIA       0X00
    MOVAR       SLOW_CNT  
    
    //RESET 贏 
    MOVRA       FINISH_FLAG
    ANDI        #1011
    MOVAR       FINISH_FLAG
    
    //遊戲結束
    CALL        GAME_WIN
    
    JMP         GOGO
    
A3:

    //答對+你好棒+贏  
    MOVIA       LOW0 U_WIN_3 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_WIN_3
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_WIN_3
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_WIN_3
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 U_WIN_3
    MOVAR       TABLE_HIGH0   
    
    //RESET 答對
    MOVRA       GAME_FLAG
    ANDI        #1101B
    MOVAR       GAME_FLAG
    
    //RESET 你好棒
    MOVIA       0X00
    MOVAR       AWESOME_CNT
    
    //RESET 贏
    MOVRA       FINISH_FLAG
    ANDI        #1011B
    MOVAR       FINISH_FLAG 
    
    //遊戲結束
    CALL        GAME_WIN
    
    JMP         GOGO            

A4: 

    //答錯+你好笨+贏 
    MOVIA       LOW0 U_WIN_4 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_WIN_4
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_WIN_4
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_WIN_4
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 U_WIN_4
    MOVAR       TABLE_HIGH0
    
    //RESET 答錯
    MOVRA       GAME_FLAG
    ANDI        #1011B
    MOVAR       GAME_FLAG
    
    //RESET 你好笨
    MOVIA       0X00
    MOVAR       IDIOT_CNT
            
    //RESET 贏
    MOVRA       FINISH_FLAG
    ANDI        #1011B
    MOVAR       FINISH_FLAG
    
    //遊戲結束
    CALL        GAME_WIN 
    
    JMP         GOGO

A5:

    //答對+贏
    MOVIA       LOW0 U_WIN_1 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_WIN_1 
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_WIN_1 
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_WIN_1 
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 U_WIN_1 
    MOVAR       TABLE_HIGH0
    
    //RESET 答對
    MOVRA       GAME_FLAG
    ANDI        #1101B
    MOVAR       GAME_FLAG
    
    //RESET 贏
    MOVRA       FINISH_FLAG
    ANDI        #1011B
    MOVAR       FINISH_FLAG
      
    //遊戲結束
    CALL        GAME_WIN
    
    JMP         GOGO
     

A6: 

    //答錯+贏
    MOVIA       LOW0 U_WIN_2 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_WIN_2 
    MOVAR       TABLE_LOW1                                    
    MOVIA       MID0 U_WIN_2 
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_WIN_2 
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 U_WIN_2 
    MOVAR       TABLE_HIGH0
    
    //RESET 答錯
    MOVRA       GAME_FLAG
    ANDI        #1011B
    MOVAR       GAME_FLAG
    
    //RESET 贏
    MOVRA       FINISH_FLAG                           
    ANDI        #1011B
    MOVAR       FINISH_FLAG  
    
    //遊戲結束
    CALL        GAME_WIN
    
    JMP         GOGO 

NOTHING:

    //單純贏 
    CALL        WIN_ADDRESS
    
    //RESET 贏
    MOVRA       FINISH_FLAG
    ANDI        #1011B
    MOVAR       FINISH_FLAG
    
    //遊戲結束
    CALL        GAME_WIN
    
    JMP         GOGO
    
;-------------------------------------

LOSE_GAME: 

    //聲音停止播放 
    MOVIA       0X00
    MOVAR       R@PlayVFlag
    
    //是否有答錯音
    MOVRA       GAME_FLAG
    SAB0        #0100B
    JMP         B1
    
    //是否MISS 3 次 
    MOVRA       SLOW_CNT
    SANEI       SLOW_TIME
    JMP         B2
    
    //都沒有    
    JMP         NOTHING_1
B1:

    //是否播你好笨? 
    MOVRA       IDIOT_CNT
    SANEI       IDIOT_TIME
    //答錯+你好笨+輸 
    JMP         B3 
    //答錯+輸
    JMP         B4    

B2:

    //你好慢+輸 
    MOVIA       LOW0 U_LOSE_3
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_LOSE_3
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_LOSE_3
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_LOSE_3
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 U_LOSE_3
    MOVAR       TABLE_HIGH0                   
    
    //RESET 你好慢 
    MOVIA       0X00
    MOVAR       SLOW_CNT
    
    //RESET 輸
    MOVRA       FINISH_FLAG
    ANDI        #1101B
    MOVAR       FINISH_FLAG
    
    //遊戲結束
    CALL        GAME_OVER
    
    JMP         GOGO
       
B3:

    //答錯+你好笨+輸 
    MOVIA       LOW0 U_LOSE_2
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_LOSE_2
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_LOSE_2
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_LOSE_2
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 U_LOSE_2
    MOVAR       TABLE_HIGH0
    
    //RESET 答錯
    MOVRA       GAME_FLAG
    ANDI        #1011B
    MOVAR       GAME_FLAG
    
    //RESET 你好笨
    MOVIA       0X00
    MOVAR       IDIOT_CNT
    
    //RESET 輸
    MOVRA       FINISH_FLAG
    ANDI        #1101B
    MOVAR       FINISH_FLAG 
    
    //遊戲結束
    CALL        GAME_OVER
    
    JMP         GOGO
    
B4: 

    //答錯+輸
    MOVIA       LOW0 U_LOSE_1
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 U_LOSE_1
    MOVAR       TABLE_LOW1
    MOVIA       MID0 U_LOSE_1
    MOVAR       TABLE_MID0
    MOVIA       MID1 U_LOSE_1
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 U_LOSE_1
    MOVAR       TABLE_HIGH0
    
    //RESET 答錯
    MOVRA       GAME_FLAG
    ANDI        #1011B
    MOVAR       GAME_FLAG
    
    //RESET 輸
    MOVRA       FINISH_FLAG
    ANDI        #1101B
    MOVAR       FINISH_FLAG
    
    //遊戲結束
    CALL        GAME_OVER
    
    JMP         GOGO

NOTHING_1: 
    
    //單純輸 
    CALL        LOSE_ADDRESS
    
    //RESET 輸
    MOVRA       FINISH_FLAG
    ANDI        #1101B
    MOVAR       FINISH_FLAG
    
    //遊戲結束
    CALL        GAME_OVER
    
    JMP         GOGO

;-------------------------------------

AWESOME_SOUND:                              

    //聲音停止播放 
    MOVIA       0X00
    MOVAR       R@PlayVFlag
    
    CALL        AWESOME_ADDRESS 
    
    //RESET 你好棒 
    MOVIA       0X00
    MOVAR       AWESOME_CNT
    
    //RESET 答對 
    MOVRA       GAME_FLAG
    ANDI        #1101B
    MOVAR       GAME_FLAG
    
    JMP         GOGO
    
IDIOT_SOUND:

    //聲音停止播放
    MOVIA       0X00
    MOVAR       R@PlayVFlag
    
    CALL        IDIOT_ADDRESS
    
    //RESET 你好笨 
    MOVIA       0X00
    MOVAR       IDIOT_CNT
    
    //RESET 答錯 
    MOVRA       GAME_FLAG
    ANDI        #1011B
    MOVAR       GAME_FLAG
    
    JMP         GOGO  
    
SLOW_SOUND:

    //聲音停止播放
    MOVIA       0X00
    MOVAR       R@PlayVFlag
    
    CALL        SLOW_ADDRESS
    
    //RESET 你好慢 
    MOVIA       0X00
    MOVAR       SLOW_CNT
    
    JMP         GOGO
    
;-------------------------------------

RIGHT_SOUND: 

    //聲音停止播放
    MOVIA       0X00
    MOVAR       R@PlayVFlag
    
    CALL        RIGHT_ADDRESS
    
    MOVRA       GAME_FLAG
    ANDI        #1101B
    MOVAR       GAME_FLAG
                                                                  
    JMP         GOGO
    
WRONG_SOUND:

    //聲音停止播放
    MOVIA       0X00
    MOVAR       R@PlayVFlag
    
    CALL        WRONG_ADDRESS
    
    MOVRA       GAME_FLAG
    ANDI        #1011B
    MOVAR       GAME_FLAG         
    
    JMP         GOGO
  
GOGO:                      

;------------------------------------------------------------------------------------------
//READ TABLE

    CALL        CLOSE_INTERRUPT
    
;----------------------------------------------

    //FIRST
    CALL        READ_CURRENT_TABLE
    
    //CODE VALUE
    DRDI        0X01
    MOVAR       CODE_VALUE_LOW0
    DRDI        0X02
    MOVAR       CODE_VALUE_LOW1
    
    //NEXT TABLE ADDRESS
    CALL        TABLE_ADDRESS_INC
    
;----------------------------------------------

    //SECOND
    CALL        READ_CURRENT_TABLE
                                               
    //OPERATION VALUE
    DRDI        0X01
    MOVAR       OPERATION_VALUE_LOW0
    DRDI        0X02                               
    MOVAR       OPERATION_VALUE_LOW1
    DRDI        0X03
    MOVAR       OPERATION_VALUE_MID0
    
    //NEXT TABLE ADDRESS
    CALL        TABLE_ADDRESS_INC

;----------------------------------------------

    //THIRD
    CALL        READ_CURRENT_TABLE
    
    //OPERATION VALUE 1
    DRDI        0X01
    MOVAR       OPERATION_VALUE_1_LOW0
    DRDI        0X02
    MOVAR       OPERATION_VALUE_1_LOW1
    DRDI        0X03
    MOVAR       OPERATION_VALUE_1_MID0
    
    //NEXT TABLE ADDRESS
    CALL        TABLE_ADDRESS_INC
    
;----------------------------------------------
    
    CALL        OPEN_INTERRUPT
    
;------------------------------------------------------------------------------------------

JUDGE_FUNCTION_TYPE:

    //JUDGE LOW1
    MOVRA       CODE_VALUE_LOW1
    
    SANEI       0X00
    JMP         FUNCTION_TYPE_0
    
    SANEI       0X0E
    JMP         FUNCTION_TYPE_E
    
    SANEI       0X0F
    JMP         FUNCTION_TYPE_F
                     
    JMP         DECODE_END
    
;------------------------------------------------------------------------------------------    
    
FUNCTION_TYPE_0:

    //JUDGE LOW0
    MOVRA       CODE_VALUE_LOW0
    
    SANEI       0X00
    JMP         DELAY_FUNCTION
    
    SANEI       0X01
    JMP         ADPCM_FUNCTION
    
    SANEI       0X02
    JMP         LED_SET_FUNCTION
    
    SANEI       0X03
    JMP         FLASHING_FUNCTION
    
    SANEI       0X04
    JMP         CAROUSEL_FUNCTION
    
    SANEI       0X05
    JMP         LIFE_POINT_SHOW_FUNCTION
    
    JMP         DECODE_END
    
FUNCTION_TYPE_E:

    //JUDGE LOW0
    MOVRA       CODE_VALUE_LOW0
    
    SANEI       0X00
    JMP         LEVEL_CHECK_FUNCTION
    
    SANEI       0X01
    JMP         GAME_READY_FUNCTION
    
    SANEI       0X02
    JMP         RETURN_CHECK_FUNCTION
    
    SANEI       0X03
    JMP         INDEX_FUNCTION
    
    SANEI       0X04
    JMP         SCORE_CHECK_FUNCTION
    
    SANEI       0X05
    JMP         P_LOW0_FUNCTION
    
    SANEI       0X06
    JMP         P_LOW1_FUNCTION
    
    SANEI       0X07
    JMP         P_MID0_FUNCTION  
    
    SANEI       0X08
    JMP         OTHER_SOUND_FUNCTION
    
    SANEI       0X09
    JMP         PLAY_SCORE_FUNCTION
    
    SANEI       0X0A
    JMP         HONOR_CHECK_FUNCTION
    
    SANEI       0X0B
    JMP         CHECK_LOOP_FUNCTION
    
    SANEI       0X0C
    JMP         SAVE_ADDRESS_FUNCTION
    
    SANEI       0X0D
    JMP         RET_ADDRESS_FUNCTION
    
    SANEI       0X0E
    JMP         SET_STOP_FLAG_FUNCTION
    
    JMP         DECODE_END 
    
FUNCTION_TYPE_F:
 
    //JUDGE LOW0
    MOVRA       CODE_VALUE_LOW0 
    
    SANEI       0X00
    JMP         GAME_END_FUNCTION   
    
    SANEI       0X01
    JMP         RETURN_END_FUNCTION
        
    SANEI       0X02
    JMP         LOOP_END_FUNCTION
    
    SANEI       0X03
    JMP         CHOOSE_END_FUNCTION
    
    SANEI       0X04
    JMP         SLEEP_END_FUNCTION
    
    JMP         DECODE_END
                                   
;------------------------------------------------------------------------------------------

DECODE_END:

    JMP         DECODE_RET
    
;====================================================================================================
    
DELAY_FUNCTION:
   
    //DECODE DISABLE
    MOVRA       STOP_FLAG        
    ORI         #0001B
    MOVAR       STOP_FLAG

    //DELAY TIME SAVE
    MOVRA       OPERATION_VALUE_LOW0
    MOVAR       DELAY_LOW0
    MOVRA       OPERATION_VALUE_LOW1
    MOVAR       DELAY_LOW1        
    MOVRA       OPERATION_VALUE_MID0
    MOVAR       DELAY_MID0
    
;------------------------------------------------------------------------------------------   
    
DELAY_FUNCTION_END:

    JMP         DECODE_END       

;====================================================================================================

GENERAL_DELAY:

    //暫停時，直接出去(保險)
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         GENERAL_DELAY_END

    MOVRA       GENERAL_2MS_TIMER
    SAB1        0X01
    JMP         GENERAL_DELAY_END
    
;------------------------------------------------------------------------------------------       
        
SIGNAL_RISE_1:

    //RESET GENERAL_2MS_FLAG
    MOVRA       GENERAL_2MS_TIMER
    ANDI        #1110
    MOVAR       GENERAL_2MS_TIMER
    
    //IF ALL 0, GO TO END
    MOVRA       DELAY_MID0
    SAEQI       0X00
    JMP         COUNTDOWN_START
    
    MOVRA       DELAY_LOW1
    SAEQI       0X00
    JMP         COUNTDOWN_START
    
    MOVRA       DELAY_LOW0
    SAEQI       0X00
    JMP         COUNTDOWN_START
    JMP         GENERAL_DELAY_END
    
;------------------------------------------------------------------------------------------       
    
COUNTDOWN_START:

    //RESET C_FLAG
    MOVIA       0X00
    MOVAR       STATUS

    //COUNTDOWN
    MOVRA       DELAY_LOW0
    DECA
    MOVAR       DELAY_LOW0  
        
    MOVIA       0X00
    MOVAR       TMP1
    MOVRA       DELAY_LOW1
    SBC         TMP1
    MOVAR       DELAY_LOW1
    
    MOVIA       0X00
    MOVAR       TMP1
    MOVRA       DELAY_MID0
    SBC         TMP1
    MOVAR       DELAY_MID0
    
    //RESET TMP1
    MOVIA       0X00
    MOVAR       TMP1          

COUNTDOWN_FINISH_OR_NOT_1:
 
    MOVRA       DELAY_MID0
    SAEQI       0X00
    JMP         GENERAL_DELAY_END
    
    MOVRA       DELAY_LOW1
    SAEQI       0X00
    JMP         GENERAL_DELAY_END
    
    MOVRA       DELAY_LOW0
    SAEQI       0X00
    JMP         GENERAL_DELAY_END
                
DECODE_ENABLE:

    MOVRA       STOP_FLAG
    ANDI        #1110B
    MOVAR       STOP_FLAG 
               
;------------------------------------------------------------------------------------------       

GENERAL_DELAY_END:

    JMP         GENERAL_DELAY_RET

;====================================================================================================  

ADPCM_FUNCTION:

    //VOICE_TABLE FLOW
    MOVIA       LOW0 VOICE_TABLE    
    MOVAR       VOICE_TABLE_LOW0
    MOVIA       LOW1 VOICE_TABLE 
    MOVAR       VOICE_TABLE_LOW1
    MOVIA       MID0 VOICE_TABLE
    MOVAR       VOICE_TABLE_MID0
    MOVIA       MID1 VOICE_TABLE
    MOVAR       VOICE_TABLE_MID1 
    MOVIA       HIGH0 VOICE_TABLE
    MOVAR       VOICE_TABLE_HIGH0
    
;------------------------------------------------------------------------------------------    
    
LOOP_SIX_TIME:

    //RESET C_FLAG
    MOVIA       0X00
    MOVAR       STATUS

    //LOOP OVER OR NOT
    MOVRA       ADPCM_LOOP_CNT
    SANEI       0X00
    JMP         RESET_ADPCM_LOOP_CNT
    
    //VIOCE TABLE BEGIN ADDRESS + TARGET VOICE ADDRESS
    MOVRA       VOICE_TABLE_LOW0  
    MOVAR       TMP2
    MOVRA       OPERATION_VALUE_LOW0
    ADC         TMP2
    MOVAR       VOICE_TABLE_LOW0

    MOVRA       VOICE_TABLE_LOW1
    MOVAR       TMP2    
    MOVRA       OPERATION_VALUE_LOW1
    ADC         TMP2
    MOVAR       VOICE_TABLE_LOW1

    MOVRA       VOICE_TABLE_MID0
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       VOICE_TABLE_MID0 

    MOVRA       VOICE_TABLE_MID1
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       VOICE_TABLE_MID1

    MOVRA       VOICE_TABLE_HIGH0
    MOVAR       TMP2
    ADC0        TMP2
    MOVRA       TMP2
    MOVAR       VOICE_TABLE_HIGH0

    //RESET TMP2
    MOVIA       0X00
    MOVAR       TMP2
    
    MOVRA       ADPCM_LOOP_CNT
    DECA
    MOVAR       ADPCM_LOOP_CNT
    
    JMP         LOOP_SIX_TIME 
    
;------------------------------------------------------------------------------------------ 

RESET_ADPCM_LOOP_CNT:

    MOVIA       0X06
    MOVAR       ADPCM_LOOP_CNT 
    
START_READ_VOICE_TABLE:
    
    CALL        CLOSE_INTERRUPT

;----------------------------------------------

    //FIRST
    CALL        READ_VOICE_TABLE
    
    //VOICE_ADDRESS_1 
    DRDI        0X01
    MOVAR       SPECIFY_VOICE_ADDRESS_LOW0
    
    CALL        VOICE_ADDRESS_INC
    
;----------------------------------------------

    //SECOND
    CALL        READ_VOICE_TABLE
    
    //VOICE_ADDRESS_2
    DRDI        0X01
    MOVAR       SPECIFY_VOICE_ADDRESS_LOW1
    
    CALL        VOICE_ADDRESS_INC  

;----------------------------------------------

    //THIRD
    CALL        READ_VOICE_TABLE
    
    //VOICE_ADDRESS_3
    DRDI        0X01
    MOVAR       SPECIFY_VOICE_ADDRESS_MID0
    
    CALL        VOICE_ADDRESS_INC
    
;----------------------------------------------

    //FOURTH
    CALL        READ_VOICE_TABLE
    
    //VOICE_ADDRESS_4
    DRDI        0X01
    MOVAR       SPECIFY_VOICE_ADDRESS_MID1
    
    CALL        VOICE_ADDRESS_INC
    
;----------------------------------------------

    //FIFTH
    CALL        READ_VOICE_TABLE
    
    //VOICE_ADDRESS_5
    DRDI        0X01
    MOVAR       SPECIFY_VOICE_ADDRESS_HIGH0
    
    CALL        VOICE_ADDRESS_INC
    
;----------------------------------------------    
    
    //SIXTH
    CALL        READ_VOICE_TABLE
    
    //VOICE_ADDRESS_6
    DRDI        0X01
    MOVAR       PCM_F
    
;----------------------------------------------
 
    CALL        OPEN_INTERRUPT
    
;----------------------------------------------

    //靜音控制 
    MOVRA       STOP_FLAG
    SAB0        #0010B
    JMP         ADPCM_FUNCTION_END
    
    playv_1     SPECIFY_VOICE_ADDRESS_LOW0, SPECIFY_VOICE_ADDRESS_LOW1, SPECIFY_VOICE_ADDRESS_MID0, SPECIFY_VOICE_ADDRESS_MID1, SPECIFY_VOICE_ADDRESS_HIGH0, PCM_F

;------------------------------------------------------------------------------------------
    
ADPCM_FUNCTION_END:

    JMP         DECODE_END

;====================================================================================================

LED_SET_FUNCTION:

    //LED_ROW_0
    MOVRA       OPERATION_VALUE_LOW0
    MOVAR       LED_ROW_0

    //LED_ROW_1
    MOVRA       OPERATION_VALUE_LOW1
    MOVAR       LED_ROW_1
    
    //LED_ROW_2
    MOVRA       OPERATION_VALUE_1_LOW0
    MOVAR       LED_ROW_2

;------------------------------------------------------------------------------------------

LED_SET_FUNCTION_END:
    
    JMP         DECODE_END

;====================================================================================================

LEVEL_CHECK_FUNCTION:

    //CHECK CURRENT LEVEL
    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         FIRST_LEVEL
    
    SANEI       0X01
    JMP         SECOND_LEVEL
    
    SANEI       0X02
    JMP         THIRD_LEVEL
    
    SANEI       0X03
    JMP         TURKEY
    
    JMP         LEVEL_CHECK_FUNCTION_END

FIRST_LEVEL:

    //CHANGE TABLE TO LEVEL_1
    MOVIA       LOW0 LEVEL_1_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEVEL_1_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEVEL_1_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEVEL_1_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 LEVEL_1_TABLE
    MOVAR       TABLE_HIGH0 
    
    JMP         LEVEL_CHECK_FUNCTION_END 
    
SECOND_LEVEL:

    MOVIA       LOW0 LEVEL_2_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEVEL_2_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEVEL_2_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEVEL_2_TABLE
    MOVAR       TABLE_MID1                                        
    MOVIA       HIGH0 LEVEL_2_TABLE
    MOVAR       TABLE_HIGH0 
    
    JMP         LEVEL_CHECK_FUNCTION_END 

THIRD_LEVEL:

    MOVIA       LOW0 LEVEL_3_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 LEVEL_3_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 LEVEL_3_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 LEVEL_3_TABLE
    MOVAR       TABLE_MID1                                        
    MOVIA       HIGH0 LEVEL_3_TABLE
    MOVAR       TABLE_HIGH0
    
    JMP         LEVEL_CHECK_FUNCTION_END 
    
TURKEY:
        
    MOVIA       LOW0 NO_3
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 NO_3
    MOVAR       TABLE_LOW1
    MOVIA       MID0 NO_3
    MOVAR       TABLE_MID0
    MOVIA       MID1 NO_3
    MOVAR       TABLE_MID1
    MOVIA       HIGH1 NO_3
    MOVAR       TABLE_HIGH0

;------------------------------------------------------------------------------------------

LEVEL_CHECK_FUNCTION_END:

    JMP         DECODE_END

;====================================================================================================

GAME_READY_FUNCTION:

    //OPEN BOOT MODE
    MOVRA       KEY_ROW_2
    ORI         #0001B
    MOVAR       KEY_ROW_2
    
    //CLOSE CHOOSE LEVEL MODE
    MOVRA       KEY_ROW_2
    ANDI        #1101B
    MOVAR       KEY_ROW_2
    
    //RANDOM ENABLE
    MOVRA       CONTROL_FLAG
    ORI         #0001B
    MOVAR       CONTROL_FLAG

    //IN GAME(HAMSTER KEY ENABLE)
    MOVRA       GAME_FLAG
    ORI         #0001B
    MOVAR       GAME_FLAG
    
    //CHOOSE LEVEL 
    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         L1
    
    SANEI       0X01
    JMP         L2
    
    SANEI       0X02
    JMP         L3
    JMP         GAME_READY_FUNCTION_END
    
L1:
           
    //CHANGE TABLE TO GAME_START_TABLE 
    MOVIA       LOW0 GAME_START_TABLE 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 GAME_START_TABLE 
    MOVAR       TABLE_LOW1
    MOVIA       MID0 GAME_START_TABLE 
    MOVAR       TABLE_MID0
    MOVIA       MID1 GAME_START_TABLE 
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 GAME_START_TABLE 
    MOVAR       TABLE_HIGH0
    
    //LEVEL DELAY SET
    MOVIA       LOW0 LEVEL_1_DELAY
    MOVAR       RAND_DELAY_LOW0
    MOVIA       LOW1 LEVEL_1_DELAY
    MOVAR       RAND_DELAY_LOW1
    MOVIA       MID0 LEVEL_1_DELAY
    MOVAR       RAND_DELAY_MID0
    
    JMP         GAME_READY_FUNCTION_END
    
L2:

    //CHANGE TABLE TO GAME_START_TABLE 
    MOVIA       LOW0 GAME_START_TABLE 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 GAME_START_TABLE 
    MOVAR       TABLE_LOW1
    MOVIA       MID0 GAME_START_TABLE 
    MOVAR       TABLE_MID0
    MOVIA       MID1 GAME_START_TABLE 
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 GAME_START_TABLE 
    MOVAR       TABLE_HIGH0
    
    //LEVEL DELAY SET
    MOVIA       LOW0 LEVEL_2_DELAY
    MOVAR       RAND_DELAY_LOW0
    MOVIA       LOW1 LEVEL_2_DELAY
    MOVAR       RAND_DELAY_LOW1
    MOVIA       MID0 LEVEL_2_DELAY
    MOVAR       RAND_DELAY_MID0

    JMP         GAME_READY_FUNCTION_END

L3:

    //CHANGE TABLE TO HIGH_LEVEL_GAME_START_TABLE
    MOVIA       LOW0 HIGH_LEVEL_GAME_START_TABLE 
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 HIGH_LEVEL_GAME_START_TABLE 
    MOVAR       TABLE_LOW1
    MOVIA       MID0 HIGH_LEVEL_GAME_START_TABLE 
    MOVAR       TABLE_MID0
    MOVIA       MID1 HIGH_LEVEL_GAME_START_TABLE 
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 HIGH_LEVEL_GAME_START_TABLE 
    MOVAR       TABLE_HIGH0

    //LEVEL DELAY SET
    MOVIA       LOW0 LEVEL_3_DELAY
    MOVAR       RAND_DELAY_LOW0
    MOVIA       LOW1 LEVEL_3_DELAY                                      
    MOVAR       RAND_DELAY_LOW1
    MOVIA       MID0 LEVEL_3_DELAY
    MOVAR       RAND_DELAY_MID0  
    
;------------------------------------------------------------------------------------------

GAME_READY_FUNCTION_END:

    JMP         DECODE_END
    
;====================================================================================================

LOOP_END_FUNCTION:

    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         LOW_LEVEL
    
    SANEI       0X01
    JMP         LOW_LEVEL
    
    SANEI       0X02
    JMP         HIGH_LEVEL
    JMP         LOOP_END_FUNCTION_END

LOW_LEVEL:

    MOVIA       LOW0 GAME_START_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 GAME_START_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 GAME_START_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 GAME_START_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 GAME_START_TABLE
    MOVAR       TABLE_HIGH0
    
    JMP         LOOP_END_FUNCTION_END
    
HIGH_LEVEL:    
    
    MOVIA       LOW0 HIGH_LEVEL_GAME_START_TABLE
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 HIGH_LEVEL_GAME_START_TABLE
    MOVAR       TABLE_LOW1
    MOVIA       MID0 HIGH_LEVEL_GAME_START_TABLE
    MOVAR       TABLE_MID0
    MOVIA       MID1 HIGH_LEVEL_GAME_START_TABLE
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 HIGH_LEVEL_GAME_START_TABLE
    MOVAR       TABLE_HIGH0
    
;------------------------------------------------------------------------------------------

LOOP_END_FUNCTION_END:

    JMP         DECODE_END

;====================================================================================================

RETURN_CHECK_FUNCTION:

    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         LOW_LEVEL_1
    
    SANEI       0X01
    JMP         LOW_LEVEL_1
    
    SANEI       0X02
    JMP         HIGH_LEVEL_1
    JMP         RETURN_CHECK_FUNCTION_END

HIGH_LEVEL_1:

    MOVRA       ADDRESS_INDEX
    SANEI       0X00                        
    JMP         DIDI_ADDRESS     
    
    SANEI       0X01
    JMP         DADADA_ADDRESS                  
    
    SANEI       0X02
    JMP         RESET_1_ADDRESS   
    JMP         RETURN_CHECK_FUNCTION_END 

LOW_LEVEL_1:

    MOVRA       ADDRESS_INDEX
    SANEI       0X00                        
    JMP         CAT_ADDRESS     
    
    SANEI       0X01
    JMP         UNKNOW_ADDRESS                  
    
    SANEI       0X02
    JMP         RESET_ADDRESS   
    JMP         RETURN_CHECK_FUNCTION_END 
    
;------------------------------------------------------------------------------------------
    
RESET_1_ADDRESS:

    MOVIA       LOW0 RESET_1
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 RESET_1
    MOVAR       TABLE_LOW1
    MOVIA       MID0 RESET_1
    MOVAR       TABLE_MID0
    MOVIA       MID1 RESET_1
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 RESET_1
    MOVAR       TABLE_HIGH0
    
    JMP         RETURN_CHECK_FUNCTION_END

DIDI_ADDRESS: 

    MOVIA       LOW0 DIDI
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 DIDI
    MOVAR       TABLE_LOW1
    MOVIA       MID0 DIDI
    MOVAR       TABLE_MID0
    MOVIA       MID1 DIDI
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 DIDI
    MOVAR       TABLE_HIGH0
    
    JMP         RETURN_CHECK_FUNCTION_END

DADADA_ADDRESS:

    MOVIA       LOW0 DADADA
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 DADADA
    MOVAR       TABLE_LOW1
    MOVIA       MID0 DADADA
    MOVAR       TABLE_MID0
    MOVIA       MID1 DADADA
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 DADADA
    MOVAR       TABLE_HIGH0
    
    JMP         RETURN_CHECK_FUNCTION_END
    
;------------------------------------------------------------------------------------------
    
RESET_ADDRESS:  

    MOVIA       LOW0 RESET
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 RESET
    MOVAR       TABLE_LOW1
    MOVIA       MID0 RESET
    MOVAR       TABLE_MID0
    MOVIA       MID1 RESET
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 RESET
    MOVAR       TABLE_HIGH0
    
    JMP         RETURN_CHECK_FUNCTION_END
    
CAT_ADDRESS:

    MOVIA       LOW0 CAT
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 CAT
    MOVAR       TABLE_LOW1
    MOVIA       MID0 CAT
    MOVAR       TABLE_MID0
    MOVIA       MID1 CAT
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 CAT
    MOVAR       TABLE_HIGH0
    
    JMP         RETURN_CHECK_FUNCTION_END

UNKNOW_ADDRESS:

    MOVIA       LOW0 UNKNOW
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 UNKNOW
    MOVAR       TABLE_LOW1
    MOVIA       MID0 UNKNOW
    MOVAR       TABLE_MID0
    MOVIA       MID1 UNKNOW
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 UNKNOW
    MOVAR       TABLE_HIGH0
                                           
RETURN_CHECK_FUNCTION_END:

    JMP         DECODE_END

;====================================================================================================

INDEX_FUNCTION:

    MOVRA       ADDRESS_INDEX
    SANEI       0X02
    JMP         RESET_TO_ZERO

INC: 

    MOVIA       0X00
    MOVAR       STATUS

    MOVRA       ADDRESS_INDEX
    INCA
    MOVAR       ADDRESS_INDEX
    
    JMP         INDEX_FUNCTION_END
    
RESET_TO_ZERO:

    MOVIA       0X00
    MOVAR       ADDRESS_INDEX

INDEX_FUNCTION_END:

    JMP         DECODE_END

;==================================================================================================== 

PLAY_SCORE_FUNCTION:

    MOVRA       LEVEL_COUNTER
    SANEI       0X00
    JMP         NUM_1
    
    SANEI       0X01
    JMP         NUM_2
    
    SANEI       0X02
    JMP         NUM_3
    JMP         PLAY_SCORE_FUNCTION_END
    
NUM_1:

    MOVIA       LOW0 NO_1
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 NO_1
    MOVAR       TABLE_LOW1
    MOVIA       MID0 NO_1
    MOVAR       TABLE_MID0
    MOVIA       MID1 NO_1
    MOVAR       TABLE_MID1
    MOVIA       HIGH1 NO_1
    MOVAR       TABLE_HIGH0
    
    JMP         PLAY_SCORE_FUNCTION_END

NUM_2:

    MOVIA       LOW0 NO_2
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 NO_2
    MOVAR       TABLE_LOW1
    MOVIA       MID0 NO_2
    MOVAR       TABLE_MID0
    MOVIA       MID1 NO_2
    MOVAR       TABLE_MID1
    MOVIA       HIGH1 NO_2
    MOVAR       TABLE_HIGH0

    JMP         PLAY_SCORE_FUNCTION_END

NUM_3:

    MOVIA       LOW0 NO_3
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 NO_3
    MOVAR       TABLE_LOW1
    MOVIA       MID0 NO_3
    MOVAR       TABLE_MID0
    MOVIA       MID1 NO_3
    MOVAR       TABLE_MID1
    MOVIA       HIGH1 NO_3
    MOVAR       TABLE_HIGH0

PLAY_SCORE_FUNCTION_END:

    JMP         DECODE_END
    
;====================================================================================================

SCORE_CHECK_FUNCTION:

;---------------------------------------
//DECISION TREE 
//LEVEL 1

    //百位是否為0 (根節點) 
    MOVRA       POINT_MID0
    SANEI       0X00
    JMP         HUN_0
    JMP         HUN_1
    
;---------------------------------------    
//LEVEL 2

HUN_0:
    
    //百為0 
    //十位是否為0 
    MOVRA       POINT_LOW1
    SANEI       0X00
    JMP         HUN_0_TEN_0
    JMP         HUN_0_TEN_1

HUN_1:

    //(百非0) 
    //十位是否為0 
    MOVRA       POINT_LOW1
    SANEI       0X00
    JMP         HUN_1_TEN_0
    JMP         HUN_1_TEN_1   
    
;---------------------------------------      
//LEVEL 3
    
HUN_0_TEN_0:

    //百為0十為0
    //個位是否為0
    MOVRA       POINT_LOW0 
    SANEI       0X00
    JMP         HUN_0_TEN_0_DIG_0
    JMP         HUN_0_TEN_0_DIG_1
    
HUN_0_TEN_1:

    //百為0十非0
    //個位是否為0
    MOVRA       POINT_LOW0 
    SANEI       0X00
    JMP         HUN_0_TEN_1_DIG_0
    JMP         HUN_0_TEN_1_DIG_1
    
HUN_1_TEN_0:

    //百非0十為0  
    //個位是否為0
    MOVRA       POINT_LOW0 
    SANEI       0X00                        
    JMP         HUN_1_TEN_0_DIG_0
    JMP         HUN_1_TEN_0_DIG_1

HUN_1_TEN_1:

    //百非0十非0
    //個位是否為0
    MOVRA       POINT_LOW0 
    SANEI       0X00
    JMP         HUN_1_TEN_1_DIG_0
    JMP         HUN_1_TEN_1_DIG_1
    
;---------------------------------------
//RESULT      
//LEVEL 4 

HUN_0_TEN_0_DIG_0:

    MOVIA       LOW0 SCORE_ZERO
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_ZERO
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_ZERO
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_ZERO
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_ZERO
    MOVAR       TABLE_HIGH0

    JMP         SCORE_CHECK_FUNCTION_END

HUN_0_TEN_0_DIG_1: 

    MOVIA       LOW0 SCORE_DIGIT
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_DIGIT
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_DIGIT
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_DIGIT
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_DIGIT
    MOVAR       TABLE_HIGH0                                 

    JMP         SCORE_CHECK_FUNCTION_END

HUN_0_TEN_1_DIG_0:

    MOVRA       POINT_LOW1
    SANEI       0X01        
    JMP         IS_10       //10
    JMP         OTHERS      //其他 : 20, 30......90

HUN_0_TEN_1_DIG_1:

    MOVRA       POINT_LOW1
    SANEI       0X01
    JMP         IS_1X       //11,12,13......19
    JMP         OTHERS_1    //其他 : 21, 22, 23......99 

HUN_1_TEN_0_DIG_0:

    MOVIA       LOW0 SCORE_HUN_DIV_BY_100
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_HUN_DIV_BY_100
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_HUN_DIV_BY_100
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_HUN_DIV_BY_100
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_HUN_DIV_BY_100
    MOVAR       TABLE_HIGH0

    JMP         SCORE_CHECK_FUNCTION_END

HUN_1_TEN_0_DIG_1:

    MOVIA       LOW0 SCORE_HUN_ZERO_DIGIT
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_HUN_ZERO_DIGIT
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_HUN_ZERO_DIGIT
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_HUN_ZERO_DIGIT
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_HUN_ZERO_DIGIT
    MOVAR       TABLE_HIGH0

    JMP         SCORE_CHECK_FUNCTION_END

HUN_1_TEN_1_DIG_0:

    MOVIA       LOW0 SCORE_HUN_DIV_BY_10
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_HUN_DIV_BY_10
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_HUN_DIV_BY_10
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_HUN_DIV_BY_10
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_HUN_DIV_BY_10
    MOVAR       TABLE_HIGH0

    JMP         SCORE_CHECK_FUNCTION_END

HUN_1_TEN_1_DIG_1:

    MOVIA       LOW0 SCORE_HUN
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_HUN
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_HUN
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_HUN
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_HUN
    MOVAR       TABLE_HIGH0

    JMP         SCORE_CHECK_FUNCTION_END
    
;---------------------------------------
//SPECIAL_CASE      
//LEVEL 5
    
IS_10:

    MOVIA       LOW0 SCORE_TENS_10
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_TENS_10
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_TENS_10
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_TENS_10
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_TENS_10
    MOVAR       TABLE_HIGH0

    JMP         SCORE_CHECK_FUNCTION_END

OTHERS:

    MOVIA       LOW0 SCORE_TENS_DIV_BY_10
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_TENS_DIV_BY_10
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_TENS_DIV_BY_10
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_TENS_DIV_BY_10
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_TENS_DIV_BY_10
    MOVAR       TABLE_HIGH0
     
    JMP         SCORE_CHECK_FUNCTION_END
    
IS_1X:

    MOVIA       LOW0 SCORE_TENS_11_TO_19
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_TENS_11_TO_19
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_TENS_11_TO_19
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_TENS_11_TO_19
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_TENS_11_TO_19
    MOVAR       TABLE_HIGH0

    JMP         SCORE_CHECK_FUNCTION_END
    
OTHERS_1:

    MOVIA       LOW0 SCORE_TENS_21_TO_99
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 SCORE_TENS_21_TO_99
    MOVAR       TABLE_LOW1
    MOVIA       MID0 SCORE_TENS_21_TO_99
    MOVAR       TABLE_MID0
    MOVIA       MID1 SCORE_TENS_21_TO_99
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 SCORE_TENS_21_TO_99
    MOVAR       TABLE_HIGH0

    JMP         SCORE_CHECK_FUNCTION_END

SCORE_CHECK_FUNCTION_END:

    JMP         DECODE_END
    
;==================================================================================================== 

P_LOW0_FUNCTION:

    CALL        SAVE_CURRENT_FLOW

    MOVRA       POINT_LOW0
    MOVAR       TMP0
    
    CALL        NUMBER_CHECK

P_LOW0_FUNCTION_END:

    JMP         DECODE_END
    
;====================================================================================================

P_LOW1_FUNCTION:

    CALL        SAVE_CURRENT_FLOW

    MOVRA       POINT_LOW1
    MOVAR       TMP0
    
    CALL        NUMBER_CHECK

P_LOW1_FUNCTION_END:

    JMP         DECODE_END

;====================================================================================================

P_MID0_FUNCTION:

    CALL        SAVE_CURRENT_FLOW

    MOVRA       POINT_MID0
    MOVAR       TMP0
    
    CALL        NUMBER_CHECK

P_MID0_FUNCTION_END:           

    JMP         DECODE_END
    
;==================================================================================================== 

NUMBER_CHECK:

    MOVRA       TMP0
    SANEI       0X00
    JMP         ZERO0
    
    SANEI       0X01
    JMP         ONE1
    
    SANEI       0X02
    JMP         TWO2
    
    SANEI       0X03
    JMP         THREE3
    
    SANEI       0X04
    JMP         FOUR4
    
    SANEI       0X05
    JMP         FIVE5
    
    SANEI       0X06
    JMP         SIX6
    
    SANEI       0X07
    JMP         SEVEN7
    
    SANEI       0X08
    JMP         EIGHT8
    
    SANEI       0X09
    JMP         NINE9
    JMP         NUMBER_CHECK_END 
    
;----------------------------------------------------------------
//SWITCH_NUMBER_TABLE 

ZERO0:

    MOVIA       LOW0 ZERO 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 ZERO 
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 ZERO 
    MOVAR       TABLE_MID0 
    MOVIA       MID1 ZERO 
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 ZERO 
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END 

ONE1:

    MOVIA       LOW0 ONE 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 ONE 
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 ONE 
    MOVAR       TABLE_MID0 
    MOVIA       MID1 ONE 
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 ONE 
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END 

TWO2:

    MOVIA       LOW0 TWO 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 TWO 
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 TWO 
    MOVAR       TABLE_MID0 
    MOVIA       MID1 TWO 
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 TWO 
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END 

THREE3:

    MOVIA       LOW0 THREE 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 THREE
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 THREE
    MOVAR       TABLE_MID0 
    MOVIA       MID1 THREE
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 THREE
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END

FOUR4:

    MOVIA       LOW0 FOUR 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 FOUR
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 FOUR
    MOVAR       TABLE_MID0 
    MOVIA       MID1 FOUR
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 FOUR
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END

FIVE5:

    MOVIA       LOW0 FIVE 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 FIVE
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 FIVE
    MOVAR       TABLE_MID0 
    MOVIA       MID1 FIVE
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 FIVE
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END

SIX6:

    MOVIA       LOW0 SIX 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 SIX
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 SIX
    MOVAR       TABLE_MID0 
    MOVIA       MID1 SIX
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 SIX
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END

SEVEN7:

    MOVIA       LOW0 SEVEN 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 SEVEN
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 SEVEN
    MOVAR       TABLE_MID0 
    MOVIA       MID1 SEVEN
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 SEVEN
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END

EIGHT8:

    MOVIA       LOW0 EIGHT 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 EIGHT
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 EIGHT
    MOVAR       TABLE_MID0 
    MOVIA       MID1 EIGHT
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 EIGHT
    MOVAR       TABLE_HIGH0 
    
    JMP         NUMBER_CHECK_END

NINE9:

    MOVIA       LOW0 NINE 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 NINE
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 NINE
    MOVAR       TABLE_MID0 
    MOVIA       MID1 NINE
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 NINE
    MOVAR       TABLE_HIGH0 
    
NUMBER_CHECK_END:

    RET
    
;==================================================================================================== 

OTHER_SOUND_FUNCTION:

    CALL        SAVE_CURRENT_FLOW

    //十 
    MOVRA       OPERATION_VALUE_LOW0
    SANEI       0X00
    JMP         TEN_VOICE
    
    //百 
    SANEI       0X01
    JMP         HUN_VOICE
    
    //千 
    SANEI       0X02
    JMP         THOU_VOICE
    
    //分 
    SANEI       0X03 
    JMP         POINT_VOICE
    JMP         OTHER_SOUND_FUNCTION_END 
    
TEN_VOICE:

    MOVIA       LOW0 TEN 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 TEN
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 TEN
    MOVAR       TABLE_MID0 
    MOVIA       MID1 TEN
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 TEN
    MOVAR       TABLE_HIGH0 
    
    JMP         OTHER_SOUND_FUNCTION_END
 
HUN_VOICE: 

    MOVIA       LOW0 HUNDRED 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 HUNDRED
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 HUNDRED
    MOVAR       TABLE_MID0 
    MOVIA       MID1 HUNDRED
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 HUNDRED
    MOVAR       TABLE_HIGH0
    
    JMP         OTHER_SOUND_FUNCTION_END
    
THOU_VOICE: 

    MOVIA       LOW0 THOUSAND 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 THOUSAND
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 THOUSAND
    MOVAR       TABLE_MID0 
    MOVIA       MID1 THOUSAND
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 THOUSAND
    MOVAR       TABLE_HIGH0
    
    JMP         OTHER_SOUND_FUNCTION_END
    
POINT_VOICE:

    MOVIA       LOW0 POINT 
    MOVAR       TABLE_LOW0 
    MOVIA       LOW1 POINT
    MOVAR       TABLE_LOW1 
    MOVIA       MID0 POINT
    MOVAR       TABLE_MID0 
    MOVIA       MID1 POINT
    MOVAR       TABLE_MID1 
    MOVIA       HIGH0 POINT
    MOVAR       TABLE_HIGH0

OTHER_SOUND_FUNCTION_END:

    JMP         DECODE_END
    
;====================================================================================================

RETURN_END_FUNCTION:

    MOVRA       RET_TMP_LOW0
    MOVAR       TABLE_LOW0
    MOVRA       RET_TMP_LOW1
    MOVAR       TABLE_LOW1
    MOVRA       RET_TMP_MID0
    MOVAR       TABLE_MID0
    MOVRA       RET_TMP_MID1
    MOVAR       TABLE_MID1
    MOVRA       RET_TMP_HIGH0
    MOVAR       TABLE_HIGH0

RETURN_END_FUNCTION_END:
    
    JMP         DECODE_END

;====================================================================================================

SAVE_CURRENT_FLOW:

    MOVRA       TABLE_LOW0
    MOVAR       RET_TMP_LOW0
    MOVRA       TABLE_LOW1
    MOVAR       RET_TMP_LOW1
    MOVRA       TABLE_MID0
    MOVAR       RET_TMP_MID0
    MOVRA       TABLE_MID1
    MOVAR       RET_TMP_MID1
    MOVRA       TABLE_HIGH0
    MOVAR       RET_TMP_HIGH0

SAVE_CURRENT_FLOW_END:

    RET
    
;====================================================================================================    

GAME_END_FUNCTION:

    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         AA0         
    JMP         AA1

AA0:

    MOVRA       CONTROL_FLAG_2
    ORI         #0001B
    MOVAR       CONTROL_FLAG_2
    
    JMP         GAME_END_FUNCTION_END
    
AA1:

    MOVRA       KEY_ROW_2
    ANDI        #1110B
    MOVAR       KEY_ROW_2

GAME_END_FUNCTION_END:

    JMP         DECODE_END
    
;==================================================================================================== 

HONOR_CHECK_FUNCTION:

    MOVRA       LEVEL_COUNTER
    SANEI       0X00            //第一關輸 
    JMP         BAD
    
    SANEI       0X01            //第二關輸 
    JMP         SOSO
    
    SANEI       0X02            //第三關輸 
    JMP         GOOD
    
    SANEI       0X03            //三關全勝 
    JMP         EXCELLENT
    JMP         HONOR_CHECK_FUNCTION_END
    
BAD:

    MOVIA       LOW0 ELEMENTARY        
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 ELEMENTARY        
    MOVAR       TABLE_LOW1
    MOVIA       MID0 ELEMENTARY        
    MOVAR       TABLE_MID0
    MOVIA       MID1 ELEMENTARY        
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 ELEMENTARY        
    MOVAR       TABLE_HIGH0
    
    JMP         HONOR_CHECK_FUNCTION_END

SOSO:

    MOVIA       LOW0 JUNIOR        
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 JUNIOR     
    MOVAR       TABLE_LOW1
    MOVIA       MID0 JUNIOR        
    MOVAR       TABLE_MID0
    MOVIA       MID1 JUNIOR   
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 JUNIOR        
    MOVAR       TABLE_HIGH0
    
    JMP         HONOR_CHECK_FUNCTION_END

GOOD:

    MOVIA       LOW0 COLLAGE      
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 COLLAGE       
    MOVAR       TABLE_LOW1
    MOVIA       MID0 COLLAGE          
    MOVAR       TABLE_MID0
    MOVIA       MID1 COLLAGE     
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 COLLAGE          
    MOVAR       TABLE_HIGH0
    
    JMP         HONOR_CHECK_FUNCTION_END

EXCELLENT:

    MOVIA       LOW0 GENIUS    
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 GENIUS      
    MOVAR       TABLE_LOW1
    MOVIA       MID0 GENIUS         
    MOVAR       TABLE_MID0
    MOVIA       MID1 GENIUS   
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 GENIUS    
    MOVAR       TABLE_HIGH0

HONOR_CHECK_FUNCTION_END:

    JMP         DECODE_END
    
;====================================================================================================

FLASHING_FUNCTION:    

    //OPEN FLASHING
    MOVRA       CONTROL_FLAG
    ORI         #0100B
    MOVAR       CONTROL_FLAG
    
    //先亮第1次
    MOVRA       OPERATION_VALUE_LOW0
    MOVAR       LED_ROW_0
    
    MOVRA       OPERATION_VALUE_LOW1
    MOVAR       LED_ROW_1
    
    MOVRA       OPERATION_VALUE_1_LOW0
    MOVAR       LED_ROW_2
    
    //SET DELAY TIME
    MOVIA       LOW0 FLASHING_SPEED
    MOVAR       DELAY_LOW0
    
    MOVIA       LOW1 FLASHING_SPEED
    MOVAR       DELAY_LOW1
    
    MOVIA       MID0 FLASHING_SPEED
    MOVAR       DELAY_MID0
    
    //SAVE FLASHING LED
    MOVRA       OPERATION_VALUE_LOW0
    MOVAR       FLASHING_L0
    
    MOVRA       OPERATION_VALUE_LOW1
    MOVAR       FLASHING_L1
    
    MOVRA       OPERATION_VALUE_1_LOW0
    MOVAR       FLASHING_L2
    
FLASHING_FUNCTION_END:

    JMP         DECODE_END
    
;====================================================================================================  

ALL_LED_FLASHING:

    //暫停時，直接出去(保險)
    MOVRA       STOP_FLAG
    SAB0        #0100B
    JMP         ALL_LED_FLASHING_END

    //OPEN FLASHING
    MOVRA       CONTROL_FLAG
    ORI         #0100B
    MOVAR       CONTROL_FLAG
    
    //先亮第1次
    MOVIA       0X00
    MOVAR       LED_ROW_0
    
    MOVIA       0X00
    MOVAR       LED_ROW_1
    
    MOVIA       0X00
    MOVAR       LED_ROW_2
    
    //SET DELAY TIME
    MOVIA       LOW0 FLASHING_SPEED
    MOVAR       DELAY_LOW0
    
    MOVIA       LOW1 FLASHING_SPEED
    MOVAR       DELAY_LOW1
    
    MOVIA       MID0 FLASHING_SPEED
    MOVAR       DELAY_MID0
    
    //SAVE FLASHING LED
    MOVIA       0X0F
    MOVAR       FLASHING_L0
    
    MOVIA       0X0F
    MOVAR       FLASHING_L1
    
    MOVIA       0X0F
    MOVAR       FLASHING_L2
    
ALL_LED_FLASHING_END:

    RET
    
;==================================================================================================== 

CHOOSE_END_FUNCTION:

    MOVRA       KEY_ROW_2
    ANDI        #1101B
    MOVAR       KEY_ROW_2

CHOOSE_END_FUNCTION_END:

    JMP         DECODE_END
    
;==================================================================================================== 

CAROUSEL_FUNCTION:

    //OPEN CAROUSEL
    MOVRA       CONTROL_FLAG
    ORI         #1000B
    MOVAR       CONTROL_FLAG

CAROUSEL_FUNCTION_END:

    JMP         DECODE_END  
    
;====================================================================================================

CHECK_LOOP_FUNCTION:

    MOVRA       KEY_ROW_2
    SAB0        #0010B
    JMP         LEVEL_CHECK_LOOP
    JMP         CHECK_LOOP_FUNCTION_END
    
LEVEL_CHECK_LOOP:

    MOVIA       LOW0 CHECKPOINT_1
    MOVAR       TABLE_LOW0
    MOVIA       LOW1 CHECKPOINT_1
    MOVAR       TABLE_LOW1
    MOVIA       MID0 CHECKPOINT_1
    MOVAR       TABLE_MID0
    MOVIA       MID1 CHECKPOINT_1
    MOVAR       TABLE_MID1
    MOVIA       HIGH0 CHECKPOINT_1
    MOVAR       TABLE_HIGH0

CHECK_LOOP_FUNCTION_END:

    JMP         DECODE_END
    
;==================================================================================================== 

LIFE_POINT_SHOW_FUNCTION:

    MOVRA       LIFE_POINT
    SANEI       0X00
    JMP         LIFE_0
    
    SANEI       0X01
    JMP         LIFE_1
    
    SANEI       0X02
    JMP         LIFE_2

    SANEI       0X03
    JMP         LIFE_3
    JMP         LIFE_POINT_SHOW_FUNCTION_END
    
LIFE_0:

    MOVIA       #1111B
    MOVAR       LED_ROW_2
    
    JMP         LIFE_POINT_SHOW_FUNCTION_END

LIFE_1:

    MOVIA       #1011B
    MOVAR       LED_ROW_2
    
    JMP         LIFE_POINT_SHOW_FUNCTION_END

LIFE_2:

    MOVIA       #1001B
    MOVAR       LED_ROW_2
    
    JMP         LIFE_POINT_SHOW_FUNCTION_END

LIFE_3:

    MOVIA       #1000B
    MOVAR       LED_ROW_2

LIFE_POINT_SHOW_FUNCTION_END:

    JMP         DECODE_END
    
;==================================================================================================== 

CLEAR_ALL:    

    MOVIA       0X0F
    MOVAR       LED_ROW_0               
    MOVAR       LED_ROW_1           
    MOVAR       LED_ROW_2 
    
    MOVIA       0X00          
    MOVAR       DELAY_LOW0           
    MOVAR       DELAY_LOW1          
    MOVAR       DELAY_MID0 
    
    MOVIA       0X00
    MOVAR       KEY_ROW_0             
    MOVAR       KEY_ROW_1             
    MOVAR       KEY_ROW_2
    
    MOVAR       LEVEL_COUNTER
    
    MOVAR       FINISH_FLAG
    
    MOVAR       AWESOME_CNT
    MOVAR       IDIOT_CNT
    MOVAR       SLOW_CNT
    
    MOVIA       0X06
    MOVAR       ADPCM_LOOP_CNT 
    
    MOVIA       0X00
    MOVAR       RAND_DELAY_LOW0
    MOVAR       RAND_DELAY_LOW1
    MOVAR       RAND_DELAY_MID0
    
    MOVAR       FLASHING_L0
    MOVAR       FLASHING_L1
    MOVAR       FLASHING_L2
    
    MOVAR       CONTROL_FLAG
    MOVAR       GAME_FLAG
    
    MOVAR       POINT_LOW0
    MOVAR       POINT_LOW1
    MOVAR       POINT_MID0
    
    MOVIA       0X03
    MOVAR       LIFE_POINT
    
    MOVIA       0X00
    MOVAR       MISCLICK
    MOVAR       MISS
    MOVAR       CAROUSEL_CNT
    
    MOVAR       APPEAR_LOW0
    MOVAR       APPEAR_LOW1
    
    MOVAR       ADDRESS_INDEX
    
    MOVAR       RET_TMP_LOW0          
    MOVAR       RET_TMP_LOW1          
    MOVAR       RET_TMP_MID0          
    MOVAR       RET_TMP_MID1         
    MOVAR       RET_TMP_HIGH0        

CLEAR_ALL_END:

    RET
    
;====================================================================================================

SAVE_ADDRESS_FUNCTION:

    MOVRA       TABLE_LOW0       
    MOVAR       RET_TMP_1_LOW0
    MOVRA       TABLE_LOW1
    MOVAR       RET_TMP_1_LOW1
    MOVRA       TABLE_MID0
    MOVAR       RET_TMP_1_MID0
    MOVRA       TABLE_MID1
    MOVAR       RET_TMP_1_MID1
    MOVRA       TABLE_HIGH0 
    MOVAR       RET_TMP_1_HIGH0

SAVE_ADDRESS_FUNCTION_END:

    JMP         DECODE_END

;====================================================================================================
    
RET_ADDRESS_FUNCTION:

    MOVRA       STOP_FLAG
    ANDI        #1011B
    MOVAR       STOP_FLAG

    MOVRA       GAME_FLAG       
    ANDI        #0111B
    MOVAR       GAME_FLAG

    MOVRA       RET_TMP_1_LOW0              
    MOVAR       TABLE_LOW0
    MOVRA       RET_TMP_1_LOW1
    MOVAR       TABLE_LOW1
    MOVRA       RET_TMP_1_MID0
    MOVAR       TABLE_MID0
    MOVRA       RET_TMP_1_MID1
    MOVAR       TABLE_MID1
    MOVRA       RET_TMP_1_HIGH0 
    MOVAR       TABLE_HIGH0

RET_ADDRESS_FUNCTION_END:

    JMP         DECODE_END
    
;====================================================================================================

SET_STOP_FLAG_FUNCTION:

    MOVRA       STOP_FLAG
    ORI         #0100B
    MOVAR       STOP_FLAG
    
    MOVRA       CONTROL_FLAG_2
    ORI         #0001B
    MOVAR       CONTROL_FLAG_2 
    
    MOVRA       GAME_FLAG
    ANDI        #0111B
    MOVAR       GAME_FLAG

SET_STOP_FLAG_FUNCTION_END:

    JMP         DECODE_END

;====================================================================================================

SLEEP_END_FUNCTION:

GO_TO_SLEEP:

    //關中斷 
    CALL        CLOSE_INTERRUPT
    
    //關PWM 
    MOVRA       PERI2
    ANDI        #0111B	 
    MOVAR       PERI2
    
    //PRA設輸出 
    MOVIA       #0000B
    MOVAR       PRAIO 
    MOVIA       #0000B
    MOVAR       PRAPL
    
    //PRB設輸出 
    MOVIA       #0000B
    MOVAR       PRBIO 
    MOVIA       #0000B
    MOVAR       PRBPL   
    
    //PRC設輸入 
    MOVIA       #0000B
    MOVAR       PRCIO
    MOVIA       #0000B
    MOVAR       PRCPL
    
    //PRD設輸出      
    MOVIA       #1111B
    MOVAR       PRDIO
    MOVIA       #1111B
    MOVAR       PRDPL
    
    //I/O腳設置
    MOVIA       0X00
    MOVAR       PRA
    MOVAR       PRB
    MOVAR       PRD
    
    //KEY_SCAN_LINE只開L2 
    MOVIA       #0100B
    MOVAR       PRC 
  
    //RESET
    MOVIA       0X00
    MOVAR       LED_SCAN_TIMER
    MOVAR       LED_SCAN_LINE_COUNTER
   
    MOVIA       0X0F
    MOVAR       LED_ROW_0
    MOVAR       LED_ROW_1
    MOVAR       LED_ROW_2
     
    MOVIA       0X00
    MOVAR       KEY_DEBOUNCE_TIMER
    MOVAR       KEY_SCAN_LINE_COUNTER
    MOVAR       WHICH_KEY_CHANGE
    MOVAR       PRESS_RESULT 
    MOVAR       RELEASE_RESULT
    MOVAR       GENERAL_2MS_TIMER
    MOVAR       DELAY_LOW0
    MOVAR       DELAY_LOW1
    MOVAR       DELAY_MID0
    MOVAR       SPECIFY_VOICE_ADDRESS_LOW0
    MOVAR       SPECIFY_VOICE_ADDRESS_LOW1
    MOVAR       SPECIFY_VOICE_ADDRESS_MID0
    MOVAR       SPECIFY_VOICE_ADDRESS_MID1
    MOVAR       SPECIFY_VOICE_ADDRESS_HIGH0
    MOVAR       PCM_F
    MOVAR       STOP_FLAG
    MOVAR       CODE_VALUE_LOW0
    MOVAR       CODE_VALUE_LOW1
    MOVAR       OPERATION_VALUE_LOW0
    MOVAR       OPERATION_VALUE_LOW1
    MOVAR       OPERATION_VALUE_MID0
    MOVAR       TABLE_LOW0
    MOVAR       TABLE_LOW1
    MOVAR       TABLE_MID0
    MOVAR       TABLE_MID1
    MOVAR       TABLE_HIGH0
    MOVAR       VOICE_TABLE_LOW0
    MOVAR       VOICE_TABLE_LOW1
    MOVAR       VOICE_TABLE_MID0
    MOVAR       VOICE_TABLE_MID1
    MOVAR       VOICE_TABLE_HIGH0
    MOVAR       KEY_ROW_0 
    MOVAR       KEY_ROW_1
    MOVAR       KEY_ROW_2
    MOVAR       OPERATION_VALUE_1_LOW0
    MOVAR       OPERATION_VALUE_1_LOW1
    MOVAR       OPERATION_VALUE_1_MID0
    MOVAR       LEVEL_COUNTER
    MOVAR       FINISH_FLAG
    MOVAR       AWESOME_CNT
    MOVAR       IDIOT_CNT
    MOVAR       SLOW_CNT
    
    MOVIA       0X06
    MOVAR       ADPCM_LOOP_CNT
    
    MOVIA       RANDOM_VALUE_MAX    
    MOVAR       RANDOM_VALUE
    
    MOVIA       0X00
    MOVAR       RAND_DELAY_LOW0
    MOVAR       RAND_DELAY_LOW1
    MOVAR       RAND_DELAY_MID0
    MOVAR       FLASHING_L0
    MOVAR       FLASHING_L1
    MOVAR       FLASHING_L2
    MOVAR       CONTROL_FLAG
    MOVAR       GAME_FLAG
    MOVAR       POINT_LOW0 
    MOVAR       POINT_LOW1
    MOVAR       POINT_MID0
    MOVAR       LIFE_POINT
    MOVAR       MISCLICK
    MOVAR       MISS
    MOVAR       CAROUSEL_CNT
    MOVAR       CONTROL_FLAG_2
    MOVAR       APPEAR_LOW0
    MOVAR       APPEAR_LOW1
    MOVAR       ADDRESS_INDEX
    MOVAR       RET_TMP_LOW0
    MOVAR       RET_TMP_LOW1
    MOVAR       RET_TMP_MID0
    MOVAR       RET_TMP_MID1
    MOVAR       RET_TMP_HIGH0
    MOVAR       RET_TMP_1_LOW0
    MOVAR       RET_TMP_1_LOW1
    MOVAR       RET_TMP_1_MID0
    MOVAR       RET_TMP_1_MID1
    MOVAR       RET_TMP_1_HIGH0
    MOVAR       TMP0
    MOVAR       TMP1
    MOVAR       TMP2
    MOVAR       TMP3
    MOVAR       TURN_OFF_DELAY_LOW0
    MOVAR       TURN_OFF_DELAY_LOW1
    MOVAR       TURN_OFF_DELAY_MID0
    MOVAR       SLEEP_DEBOUNCE
    MOVAR       NEW_KEY
    MOVAR       OLD_KEY_0
    MOVAR       OLD_KEY_1
    MOVAR       OLD_KEY_TMP
    
    //重新存I/O 
    MOVRA       PRA
    MOVAR       PRA 
    MOVRA       PRB
    MOVAR       PRB    
    MOVRA       PRC
    MOVAR       PRC
    MOVRA       PRD
    MOVAR       PRD
    
;------------------睡眠-------------------
    
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    SLEEP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    
;------------------喚醒-------------------

L2_WAKE:

    CALL        SET_KEY_SCAN_LINE_2
    
DELAY_2MS_LOOP:

    //讓他成功上電
    CALL        SLEEP_POLLING_TIMER
    
    MOVRA       GENERAL_2MS_TIMER
    SAB1        #1000B
    JMP         DELAY_2MS_LOOP
    
;----------------------------------------    
//因為寫在同一個POLLING，會被動到，所以所有CNT都要歸0 

    MOVRA       GENERAL_2MS_TIMER
    ANDI        #0111B
    MOVAR       GENERAL_2MS_TIMER
     
    MOVIA       0X00
    MOVAR       SLEEP_DEBOUNCE
    MOVAR       KEY_DEBOUNCE_TIMER
    
;----------------------------------------
    
DEBOUNCE_10MS:

    CALL        SLEEP_POLLING_TIMER    
    
    MOVRA       SLEEP_DEBOUNCE
    SAEQI       0X05
    JMP         DEBOUNCE_10MS
    
;----------------------------------------    
//因為寫在同一個POLLING，會被動到，所以所有CNT都要歸0
    
    MOVRA       GENERAL_2MS_TIMER
    ANDI        #0111B
    MOVAR       GENERAL_2MS_TIMER
 
    MOVIA       0X00
    MOVAR       SLEEP_DEBOUNCE 
    MOVAR       KEY_DEBOUNCE_TIMER  
    
;---------------------------------------- 

KEY_ROW_2X:

    MOVRA       OLD_KEY_2
    MOVAR       OLD_KEY_TMP
    
    CALL        KEY_CHANGE_OR_NOT
    
    MOVRA       WHICH_KEY_CHANGE
    SAEQI       0X00
    JMP         DEBOUNCE_2
    
;----------------------------------------    
//因為寫在同一個POLLING，會被動到，所以所有CNT都要歸0
//DEBOUNCE沒過或本來就一樣    
    
    MOVRA       GENERAL_2MS_TIMER
    ANDI        #0111B
    MOVAR       GENERAL_2MS_TIMER
 
    MOVIA       0X00
    MOVAR       SLEEP_DEBOUNCE 
    MOVAR       KEY_DEBOUNCE_TIMER  
    JMP         GO_TO_SLEEP
    
;----------------------------------------

DEBOUNCE_2:

    CALL        SLEEP_POLLING_TIMER
    
    MOVRA       KEY_DEBOUNCE_TIMER
    SAEQI       0X05
    JMP         DEBOUNCE_2
    
;----------------------------------------    
//因為寫在同一個POLLING，會被動到，所以所有CNT都要歸0
//DEBOUNCE 過了 
    
    MOVRA       GENERAL_2MS_TIMER
    ANDI        #0111B
    MOVAR       GENERAL_2MS_TIMER
 
    MOVIA       0X00
    MOVAR       SLEEP_DEBOUNCE 
    MOVAR       KEY_DEBOUNCE_TIMER  
    
;---------------------------------------- 

    CALL        PRESS_OR_RELEASE 
        
;----------------------------------------    
//PRESS
    
    //L2K0
    MOVRA       PRESS_RESULT
    SAB0        0X01
    JMP         GO_TO_MAIN

    //L2K1
    NOP

;----------------------------------------
//RELEASE 
    
    //L2K0
    NOP
    
    //L2K1
    NOP   
    
;----------------------------------------

    MOVRA       NEW_KEY
    MOVAR       OLD_KEY_2
    
    JMP         GO_TO_SLEEP    

GO_TO_MAIN:

    CALL        OPEN_INTERRUPT
    
    MOVRA       PERI2
    ORI         #1000B					  	 
    MOVAR       PERI2
    
    //PRA設輸出 
    MOVIA       #0000B
    MOVAR       PRAIO 
    MOVIA       #0000B
    MOVAR       PRAPL
    
    //PRB設輸出 
    MOVIA       #0000B
    MOVAR       PRBIO 
    MOVIA       #0000B
    MOVAR       PRBPL   
    
    //PRC設輸入 
    MOVIA       #0000B
    MOVAR       PRCIO
    MOVIA       #0000B
    MOVAR       PRCPL
    
    //PRD設輸出      
    MOVIA       #1111B
    MOVAR       PRDIO
    MOVIA       #1111B
    MOVAR       PRDPL
    
    //I/O腳設置
    MOVIA       0X00
    MOVAR       PRA
    MOVAR       PRB
    MOVAR       PRC
    MOVAR       PRD 
  
    //RESET
    MOVIA       0X00
    MOVAR       LED_SCAN_TIMER
    MOVAR       LED_SCAN_LINE_COUNTER
   
    MOVIA       0X0F
    MOVAR       LED_ROW_0
    MOVAR       LED_ROW_1
    MOVAR       LED_ROW_2
     
    MOVIA       0X00
    MOVAR       KEY_DEBOUNCE_TIMER
    MOVAR       KEY_SCAN_LINE_COUNTER
    MOVAR       WHICH_KEY_CHANGE
    MOVAR       PRESS_RESULT 
    MOVAR       RELEASE_RESULT
    MOVAR       GENERAL_2MS_TIMER
    MOVAR       DELAY_LOW0
    MOVAR       DELAY_LOW1
    MOVAR       DELAY_MID0
    MOVAR       SPECIFY_VOICE_ADDRESS_LOW0
    MOVAR       SPECIFY_VOICE_ADDRESS_LOW1
    MOVAR       SPECIFY_VOICE_ADDRESS_MID0
    MOVAR       SPECIFY_VOICE_ADDRESS_MID1
    MOVAR       SPECIFY_VOICE_ADDRESS_HIGH0
    MOVAR       PCM_F
    MOVAR       STOP_FLAG
    MOVAR       CODE_VALUE_LOW0
    MOVAR       CODE_VALUE_LOW1
    MOVAR       OPERATION_VALUE_LOW0
    MOVAR       OPERATION_VALUE_LOW1
    MOVAR       OPERATION_VALUE_MID0
    MOVAR       TABLE_LOW0
    MOVAR       TABLE_LOW1
    MOVAR       TABLE_MID0
    MOVAR       TABLE_MID1
    MOVAR       TABLE_HIGH0
    MOVAR       VOICE_TABLE_LOW0
    MOVAR       VOICE_TABLE_LOW1
    MOVAR       VOICE_TABLE_MID0
    MOVAR       VOICE_TABLE_MID1
    MOVAR       VOICE_TABLE_HIGH0
    MOVAR       KEY_ROW_0 
    MOVAR       KEY_ROW_1
    MOVAR       KEY_ROW_2
    MOVAR       OPERATION_VALUE_1_LOW0
    MOVAR       OPERATION_VALUE_1_LOW1
    MOVAR       OPERATION_VALUE_1_MID0
    MOVAR       LEVEL_COUNTER
    MOVAR       FINISH_FLAG
    MOVAR       AWESOME_CNT
    MOVAR       IDIOT_CNT
    MOVAR       SLOW_CNT
    
    MOVIA       0X06
    MOVAR       ADPCM_LOOP_CNT
    
    MOVIA       RANDOM_VALUE_MAX    
    MOVAR       RANDOM_VALUE
    
    MOVIA       0X00
    MOVAR       RAND_DELAY_LOW0
    MOVAR       RAND_DELAY_LOW1
    MOVAR       RAND_DELAY_MID0
    MOVAR       FLASHING_L0
    MOVAR       FLASHING_L1
    MOVAR       FLASHING_L2
    MOVAR       CONTROL_FLAG
    MOVAR       GAME_FLAG
    MOVAR       POINT_LOW0 
    MOVAR       POINT_LOW1
    MOVAR       POINT_MID0
    MOVAR       LIFE_POINT
    MOVAR       MISCLICK
    MOVAR       MISS
    MOVAR       CAROUSEL_CNT
    MOVAR       CONTROL_FLAG_2
    MOVAR       APPEAR_LOW0
    MOVAR       APPEAR_LOW1
    MOVAR       ADDRESS_INDEX
    MOVAR       RET_TMP_LOW0
    MOVAR       RET_TMP_LOW1
    MOVAR       RET_TMP_MID0
    MOVAR       RET_TMP_MID1
    MOVAR       RET_TMP_HIGH0
    MOVAR       RET_TMP_1_LOW0
    MOVAR       RET_TMP_1_LOW1
    MOVAR       RET_TMP_1_MID0
    MOVAR       RET_TMP_1_MID1
    MOVAR       RET_TMP_1_HIGH0
    MOVAR       TMP0
    MOVAR       TMP1
    MOVAR       TMP2
    MOVAR       TMP3
    MOVAR       TURN_OFF_DELAY_LOW0
    MOVAR       TURN_OFF_DELAY_LOW1
    MOVAR       TURN_OFF_DELAY_MID0
    MOVAR       SLEEP_DEBOUNCE
    MOVAR       NEW_KEY
    MOVAR       OLD_KEY_0
    MOVAR       OLD_KEY_1
    MOVAR       OLD_KEY_TMP
    
SLEEP_END_FUNCTION_END:

    JMP         DECODE_END
    
;====================================================================================================

ORG 0X02000

VOICE_TABLE:

    DW LOW0 V0, LOW1 V0, MID0 V0, MID1 V0, HIGH0 V0, 0X001
    DW LOW0 V1, LOW1 V1, MID0 V1, MID1 V1, HIGH0 V1, 0X001
    DW LOW0 V2, LOW1 V2, MID0 V2, MID1 V2, HIGH0 V2, 0X001
    DW LOW0 V3, LOW1 V3, MID0 V3, MID1 V3, HIGH0 V3, 0X001
    DW LOW0 V4, LOW1 V4, MID0 V4, MID1 V4, HIGH0 V4, 0X001
    DW LOW0 V5, LOW1 V5, MID0 V5, MID1 V5, HIGH0 V5, 0X001
    DW LOW0 V6, LOW1 V6, MID0 V6, MID1 V6, HIGH0 V6, 0X001
    DW LOW0 V7, LOW1 V7, MID0 V7, MID1 V7, HIGH0 V7, 0X001
    DW LOW0 V8, LOW1 V8, MID0 V8, MID1 V8, HIGH0 V8, 0X001
    DW LOW0 V9, LOW1 V9, MID0 V9, MID1 V9, HIGH0 V9, 0X001
    DW LOW0 V10, LOW1 V10, MID0 V10, MID1 V10, HIGH0 V10, 0X001 
    DW LOW0 V11, LOW1 V11, MID0 V11, MID1 V11, HIGH0 V11, 0X001
    DW LOW0 V12, LOW1 V12, MID0 V12, MID1 V12, HIGH0 V12, 0X001
    DW LOW0 V13, LOW1 V13, MID0 V13, MID1 V13, HIGH0 V13, 0X001
    DW LOW0 V14, LOW1 V14, MID0 V14, MID1 V14, HIGH0 V14, 0X001 
    DW LOW0 V15, LOW1 V15, MID0 V15, MID1 V15, HIGH0 V15, 0X001
    DW LOW0 V16, LOW1 V16, MID0 V16, MID1 V16, HIGH0 V16, 0X001
    DW LOW0 V17, LOW1 V17, MID0 V17, MID1 V17, HIGH0 V17, 0X001
    DW LOW0 V18, LOW1 V18, MID0 V18, MID1 V18, HIGH0 V18, 0X001
    DW LOW0 V19, LOW1 V19, MID0 V19, MID1 V19, HIGH0 V19, 0X001
    DW LOW0 V20, LOW1 V20, MID0 V20, MID1 V20, HIGH0 V20, 0X001
    DW LOW0 V21, LOW1 V21, MID0 V21, MID1 V21, HIGH0 V21, 0X001
    DW LOW0 V22, LOW1 V22, MID0 V22, MID1 V22, HIGH0 V22, 0X001
    DW LOW0 V23, LOW1 V23, MID0 V23, MID1 V23, HIGH0 V23, 0X001
    DW LOW0 V24, LOW1 V24, MID0 V24, MID1 V24, HIGH0 V24, 0X001
    DW LOW0 V25, LOW1 V25, MID0 V25, MID1 V25, HIGH0 V25, 0X001
    DW LOW0 V26, LOW1 V26, MID0 V26, MID1 V26, HIGH0 V26, 0X001
    DW LOW0 V27, LOW1 V27, MID0 V27, MID1 V27, HIGH0 V27, 0X001
    DW LOW0 V28, LOW1 V28, MID0 V28, MID1 V28, HIGH0 V28, 0X001
    DW LOW0 V29, LOW1 V29, MID0 V29, MID1 V29, HIGH0 V29, 0X001
    DW LOW0 V30, LOW1 V30, MID0 V30, MID1 V30, HIGH0 V30, 0X001
    DW LOW0 V31, LOW1 V31, MID0 V31, MID1 V31, HIGH0 V31, 0X001
    DW LOW0 V32, LOW1 V32, MID0 V32, MID1 V32, HIGH0 V32, 0X001
    DW LOW0 V33, LOW1 V33, MID0 V33, MID1 V33, HIGH0 V33, 0X001
    DW LOW0 V34, LOW1 V34, MID0 V34, MID1 V34, HIGH0 V34, 0X001
    DW LOW0 V35, LOW1 V35, MID0 V35, MID1 V35, HIGH0 V35, 0X001
    DW LOW0 V36, LOW1 V36, MID0 V36, MID1 V36, HIGH0 V36, 0X001
    DW LOW0 V37, LOW1 V37, MID0 V37, MID1 V37, HIGH0 V37, 0X001
    DW LOW0 V38, LOW1 V38, MID0 V38, MID1 V38, HIGH0 V38, 0X001
    DW LOW0 V39, LOW1 V39, MID0 V39, MID1 V39, HIGH0 V39, 0X001
    DW LOW0 V40, LOW1 V40, MID0 V40, MID1 V40, HIGH0 V40, 0X001
    DW LOW0 V41, LOW1 V41, MID0 V41, MID1 V41, HIGH0 V41, 0X001
    DW LOW0 V42, LOW1 V42, MID0 V42, MID1 V42, HIGH0 V42, 0X001
    DW LOW0 V43, LOW1 V43, MID0 V43, MID1 V43, HIGH0 V43, 0X001
    DW LOW0 V44, LOW1 V44, MID0 V44, MID1 V44, HIGH0 V44, 0X001
    DW LOW0 V45, LOW1 V45, MID0 V45, MID1 V45, HIGH0 V45, 0X001
    DW LOW0 V46, LOW1 V46, MID0 V46, MID1 V46, HIGH0 V46, 0X001
    DW LOW0 V47, LOW1 V47, MID0 V47, MID1 V47, HIGH0 V47, 0X001
    DW LOW0 V48, LOW1 V48, MID0 V48, MID1 V48, HIGH0 V48, 0X001
    DW LOW0 V49, LOW1 V49, MID0 V49, MID1 V49, HIGH0 V49, 0X001
    DW LOW0 V50, LOW1 V50, MID0 V50, MID1 V50, HIGH0 V50, 0X001
    DW LOW0 V51, LOW1 V51, MID0 V51, MID1 V51, HIGH0 V51, 0X001
    DW LOW0 V52, LOW1 V52, MID0 V52, MID1 V52, HIGH0 V52, 0X001
    DW LOW0 V53, LOW1 V53, MID0 V53, MID1 V53, HIGH0 V53, 0X001
    DW LOW0 V54, LOW1 V54, MID0 V54, MID1 V54, HIGH0 V54, 0X001
    DW LOW0 V55, LOW1 V55, MID0 V55, MID1 V55, HIGH0 V55, 0X001
    DW LOW0 V56, LOW1 V56, MID0 V56, MID1 V56, HIGH0 V56, 0X001
    DW LOW0 V57, LOW1 V57, MID0 V57, MID1 V57, HIGH0 V57, 0X001
    
;-------------------------------------------------------------------
                                                               
BOOT_TABLE:
    
    DW LED_SET    , 0X0FF, 0X0F0        //LIFE POINTS LED OPEN
    DW ADPCM      , 0X01C, 0X000        //歡迎進入...
    DW LED_SET    , 0X000, 0X0F0        //ALL LED OPEN
    DW ADPCM      , 0X00A, 0X000        //READY VOICE
    DW LED_SET    , 0X0FF, 0X00F        //ALL LED CLOSE
    DW DELAY      , 0X096, 0X000        //DELAY 0.5S   
    DW LEVEL_CHECK, 0X000, 0X000        //SWITCH TO LEVEL TABLE
    
;-------------------------------------------------------------------

LEVEL_1_TABLE:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00D, 0X000        //一 
    DW ADPCM      , 0X01B, 0X000        //關
    DW LIFE_POINT_SHOW, 0X000, 0X000    //LIFE POINT LED
    DW ADPCM      , 0X002, 0X000        //LEVEL OK VOICE
    DW DELAY      , 0X096, 0X000        //DELAY 0.5S
    DW GAME_READY , 0X000, 0X000        //SWITCH TO GAME MODE 
    
;-------------------------------------------------------------------

LEVEL_2_TABLE:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00E, 0X000        //二 
    DW ADPCM      , 0X01B, 0X000        //關
    DW LIFE_POINT_SHOW, 0X000, 0X000    //LIFE POINT LED 
    DW ADPCM      , 0X002, 0X000        //LEVEL OK VOICE
    DW DELAY      , 0X096, 0X000        //DELAY 0.5S
    DW GAME_READY , 0X000, 0X000        //SWITCH TO GAME MODE

;-------------------------------------------------------------------
 
LEVEL_3_TABLE:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00F, 0X000        //三 
    DW ADPCM      , 0X01B, 0X000        //關 
    DW LIFE_POINT_SHOW, 0X000, 0X000    //LIFE POINT LED
    DW ADPCM      , 0X002, 0X000        //LEVEL OK VOICE
    DW DELAY      , 0X096, 0X000        //DELAY 0.5S
    DW GAME_READY , 0X000, 0X000        //SWITCH TO GAME MODE
    
;-------------------------------------------------------------------     
    
GAME_START_TABLE:

    DW ADPCM      , 0X003, 0X000        //汪汪
    DW DELAY      , 0X032, 0X000        //DELAY
    
CAT:

    DW INDEX      , 0X000, 0X000        //位置++ 
    DW ADPCM      , 0X004, 0X000        //喵~~
    DW DELAY      , 0X032, 0X000        //DELAY
    
UNKNOW:

    DW INDEX      , 0X000, 0X000        //位置++ 
    DW ADPCM      , 0X005, 0X000        //????
    DW DELAY      , 0X032, 0X000        //DELAY
    
RESET:    
    
    DW INDEX      , 0X000, 0X000        //RESET位置 
    DW LOOP_END   , 0X000, 0X000        //LOOP END
    
;-------------------------------------------------------------------
    
HIGH_LEVEL_GAME_START_TABLE:

    DW ADPCM      , 0X006, 0X000        //喀喀 
    DW DELAY      , 0X032, 0X000        //DELAY
    
DIDI:   
    
    DW INDEX      , 0X000, 0X000        //位置++ 
    DW ADPCM      , 0X007, 0X000        //滴滴 
    DW DELAY      , 0X032, 0X000        //DELAY
    
DADADA:    
    
    DW INDEX      , 0X000, 0X000        //位置++ 
    DW ADPCM      , 0X008, 0X000        //答答答 
    DW DELAY      , 0X032, 0X000        //DELAY
    
RESET_1:    
    
    DW INDEX      , 0X000, 0X000        //RESET位置 
    DW LOOP_END   , 0X000, 0X000        //LOOP END
    
;-------------------------------------------------------------------
    
AWESOME_TABLE:

    //答對+你好棒 
    DW ADPCM       , 0X00B, 0X000
    DW ADPCM       , 0X035, 0X000
    DW ADPCM       , 0X034, 0X000
    DW RETURN_CHECK, 0X000, 0X000

IDIOT_TABLE:

    //答錯+你好笨 
    DW ADPCM       , 0X001, 0X000
    DW ADPCM       , 0X035, 0X000     
    DW ADPCM       , 0X032, 0X000
    DW RETURN_CHECK, 0X000, 0X000
    
SLOW_TABLE:
    
    //你好慢 
    DW ADPCM       , 0X035, 0X000            
    DW ADPCM       , 0X033, 0X000                   
    DW RETURN_CHECK, 0X000, 0X000
    
;---------------------------------------
    
RIGHT:

    //答對 
    DW ADPCM       , 0X00B, 0X000
    DW RETURN_CHECK, 0X000, 0X000

WRONG:

    //答錯 
    DW ADPCM       , 0X001, 0X000
    DW RETURN_CHECK, 0X000, 0X000
    
;---------------------------------------
    
U_WIN:       //OK

    //單純贏 
    DW ADPCM       , 0X039, 0X000
    DW ADPCM       , 0X000, 0X000
    DW LEVEL_CHECK , 0X000, 0X000       //下一關
    
U_WIN_1:     //OK

    //答對+贏
    DW ADPCM       , 0X00B, 0X000
    DW ADPCM       , 0X039, 0X000
    DW ADPCM       , 0X000, 0X000
    DW LEVEL_CHECK , 0X000, 0X000       //下一關

U_WIN_2:     //OK

    //答錯+贏
    DW ADPCM       , 0X001, 0X000
    DW ADPCM       , 0X039, 0X000
    DW ADPCM       , 0X000, 0X000
    DW LEVEL_CHECK , 0X000, 0X000       //下一關

U_WIN_3:     //NG

    //答對+你好棒+贏
    DW ADPCM       , 0X00B, 0X000
    DW ADPCM       , 0X035, 0X000
    DW ADPCM       , 0X034, 0X000
    DW ADPCM       , 0X039, 0X000
    DW ADPCM       , 0X000, 0X000
    DW LEVEL_CHECK , 0X000, 0X000       //下一關

U_WIN_4:     //NG

    //答錯+你好笨+贏 
    DW ADPCM       , 0X001, 0X000
    DW ADPCM       , 0X035, 0X000            
    DW ADPCM       , 0X033, 0X000
    DW ADPCM       , 0X039, 0X000
    DW ADPCM       , 0X000, 0X000
    DW LEVEL_CHECK , 0X000, 0X000       //下一關
    
U_WIN_5:     //OK

    //你好慢+贏
    DW ADPCM       , 0X035, 0X000            
    DW ADPCM       , 0X033, 0X000
    DW ADPCM       , 0X039, 0X000
    DW ADPCM       , 0X000, 0X000
    DW LEVEL_CHECK , 0X000, 0X000       //下一關 
    
;---------------------------------------
    
U_LOSE:      //OK

    //單純輸 
    DW ADPCM       , 0X009, 0X000
    DW PLAY_SCORE  , 0X000, 0X000       //播報分數 
    
U_LOSE_1:    //OK

    //答錯+輸 
    DW ADPCM       , 0X001, 0X000
    DW ADPCM       , 0X009, 0X000
    DW PLAY_SCORE  , 0X000, 0X000       //播報分數
    

U_LOSE_2:    //OK

    //答錯+你好笨+輸
    DW ADPCM       , 0X001, 0X000
    DW ADPCM       , 0X035, 0X000     
    DW ADPCM       , 0X032, 0X000
    DW ADPCM       , 0X009, 0X000
    DW PLAY_SCORE  , 0X000, 0X000       //播報分數

U_LOSE_3:    //OK

    //你好慢+輸
    DW ADPCM       , 0X035, 0X000            
    DW ADPCM       , 0X033, 0X000
    DW ADPCM       , 0X009, 0X000
    DW PLAY_SCORE  , 0X000, 0X000       //播報分數
    
;---------------------------------------

NO_1:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00D, 0X000        //一 
    DW ADPCM      , 0X01B, 0X000        //關
    DW ADPCM      , 0X036, 0X000        //本次 
    DW ADPCM      , 0X037, 0X000        //得分
    DW ADPCM      , 0X020, 0X000        //為
    DW SCORE_CHECK, 0X000, 0X000        //檢查分數 
                                         
NO_2:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00E, 0X000        //二 
    DW ADPCM      , 0X01B, 0X000        //關
    DW ADPCM      , 0X036, 0X000        //本次 
    DW ADPCM      , 0X037, 0X000        //得分
    DW ADPCM      , 0X020, 0X000        //為
    DW SCORE_CHECK, 0X000, 0X000        //檢查分數 

NO_3:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00F, 0X000        //三 
    DW ADPCM      , 0X01B, 0X000        //關
    DW ADPCM      , 0X036, 0X000        //本次 
    DW ADPCM      , 0X037, 0X000        //得分
    DW ADPCM      , 0X020, 0X000        //為
    DW SCORE_CHECK, 0X000, 0X000        //檢查分數
    
;---------------------------------------

//小學 
ELEMENTARY:

    DW ADPCM      , 0X02F, 0X000        //加油阿 
    DW ADPCM      , 0X031, 0X000        //小學生 
    DW ADPCM      , 0X01E, 0X000        //本機 
    DW ADPCM      , 0X01F, 0X000        //最高
    DW ADPCM      , 0X021, 0X000        //榮譽
    DW ADPCM      , 0X020, 0X000        //為
    DW ADPCM      , 0X023, 0X000        //天才 
    DW ADPCM      , 0X025, 0X000        //稱號
    DW GAME_END   , 0X000, 0X000        //遊戲結束

//中學 
JUNIOR:

    DW ADPCM      , 0X02F, 0X000        //加油阿
    DW ADPCM      , 0X030, 0X000        //中學生
    DW ADPCM      , 0X01E, 0X000        //本機 
    DW ADPCM      , 0X01F, 0X000        //最高
    DW ADPCM      , 0X021, 0X000        //榮譽
    DW ADPCM      , 0X020, 0X000        //為
    DW ADPCM      , 0X023, 0X000        //天才 
    DW ADPCM      , 0X025, 0X000        //稱號
    DW GAME_END   , 0X000, 0X000        //遊戲結束 

//大學
COLLAGE:

    DW ADPCM      , 0X022, 0X000        //恭喜您，榮獲 
    DW ADPCM      , 0X02D, 0X000        //大學生
    DW ADPCM      , 0X02E, 0X000        //文憑
    DW ADPCM      , 0X000, 0X000        //(拍手)
    DW ADPCM      , 0X01E, 0X000        //本機 
    DW ADPCM      , 0X01F, 0X000        //最高
    DW ADPCM      , 0X021, 0X000        //榮譽
    DW ADPCM      , 0X020, 0X000        //為
    DW ADPCM      , 0X023, 0X000        //天才 
    DW ADPCM      , 0X025, 0X000        //稱號
    DW GAME_END   , 0X000, 0X000        //遊戲結束 

//天才 
GENIUS: 

    DW ADPCM      , 0X022, 0X000        //恭喜您，榮獲 
    DW ADPCM      , 0X01F, 0X000        //最高
    DW ADPCM      , 0X021, 0X000        //榮譽 
    DW ADPCM      , 0X023, 0X000        //天才 
    DW ADPCM      , 0X025, 0X000        //稱號
    DW ADPCM      , 0X000, 0X000        //(拍手)
    DW GAME_END   , 0X000, 0X000        //遊戲結束 
   
;---------------------------------------

CHOOSE_LEVEL:

    DW CAROUSEL   , 0X000, 0X000        //打開輪播 
    DW ADPCM      , 0X01D, 0X000        //請選關 
    
CHECKPOINT_1:
    
    DW CHECK_LOOP , 0X000, 0X000        //卡著 

;---------------------------------------

LEV1:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00D, 0X000        //一 
    DW ADPCM      , 0X01B, 0X000        //關
    DW CHECK_LOOP , 0X000, 0X000        //回去繼續卡 

LEV2:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00E, 0X000        //二 
    DW ADPCM      , 0X01B, 0X000        //關
    DW CHECK_LOOP , 0X000, 0X000        //回去繼續卡

LEV3:

    DW ADPCM      , 0X01A, 0X000        //第 
    DW ADPCM      , 0X00F, 0X000        //三 
    DW ADPCM      , 0X01B, 0X000        //關
    DW CHECK_LOOP , 0X000, 0X000        //回去繼續卡

SILENCE_VOICE:

    DW ADPCM      , 0X038, 0X000        //靜音音效 
    DW CHECK_LOOP , 0X000, 0X000        //回去繼續卡  
    
PAUSE_VOICE:

    DW ADPCM        , 0X038, 0X000      //暫停音效
    DW SET_STOP_FLAG, 0X000, 0X000      
                                                                               
RESUME_VOICE:

    DW ADPCM      , 0X038, 0X000        //繼續音效
    DW RET_ADDRESS, 0X000, 0X000        //回去 
                                        
CLOSE:

    DW LED_SET    , 0X0FF, 0X00E        //LED亮 
    DW ADPCM      , 0X00F, 0X000        //語音3 
    DW LED_SET    , 0X0FF, 0X00D        //LED亮
    DW ADPCM      , 0X00E, 0X000        //語音2
    DW LED_SET    , 0X0FF, 0X00B        //LED亮
    DW ADPCM      , 0X00D, 0X000        //語音1
    DW LED_SET    , 0X0FF, 0X00F        //LED關 
    DW ADPCM      , 0X01B, 0X000        //關 
    DW SLEEP_END  , 0X000, 0X000        //睡覺                
                     
;---------------------------------------

//0
SCORE_ZERO:

    DW ADPCM      , 0X00C, 0X000        //0
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽 

//1~9    
SCORE_DIGIT:

    DW P_LOW0     , 0X000, 0X000        //個位數  
    DW OTHER_SOUND, 0X003, 0X000        //分 
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽 

//10    
SCORE_TENS_10:
 
    DW OTHER_SOUND, 0X000, 0X000        //十 
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽     

//20, 30, 40......    
SCORE_TENS_DIV_BY_10:

    DW P_LOW1     , 0X000, 0X000        //十位數 
    DW OTHER_SOUND, 0X000, 0X000        //十 
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽     

//11~19    
SCORE_TENS_11_TO_19:

    DW OTHER_SOUND, 0X000, 0X000        //十
    DW P_LOW0     , 0X000, 0X000        //個位數
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽        
    
//21~99
SCORE_TENS_21_TO_99:
          
    DW P_LOW1     , 0X000, 0X000        //十位數
    DW OTHER_SOUND, 0X000, 0X000        //十
    DW P_LOW0     , 0X000, 0X000        //個位數
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽               
    
//100, 200, 300...... 
SCORE_HUN_DIV_BY_100:

    DW P_MID0     , 0X000, 0X000        //百位數 
    DW OTHER_SOUND, 0X001, 0X000        //百 
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽             
    
//101~109, 201~209......
SCORE_HUN_ZERO_DIGIT:

    DW P_MID0     , 0X000, 0X000        //百位數 
    DW OTHER_SOUND, 0X001, 0X000        //百
    DW ADPCM      , 0X00C, 0X000        //0
    DW P_LOW0     , 0X000, 0X000        //個位數
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽           
    
//110,120,130......
SCORE_HUN_DIV_BY_10:

    DW P_MID0     , 0X000, 0X000        //百位數 
    DW OTHER_SOUND, 0X001, 0X000        //百    
    DW P_LOW1     , 0X000, 0X000        //十位數
    DW OTHER_SOUND, 0X000, 0X000        //十
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽            

//111~999......    
SCORE_HUN:

    DW P_MID0     , 0X000, 0X000        //百位數 
    DW OTHER_SOUND, 0X001, 0X000        //百    
    DW P_LOW1     , 0X000, 0X000        //十位數
    DW OTHER_SOUND, 0X000, 0X000        //十
    DW P_LOW0     , 0X000, 0X000        //個位數
    DW OTHER_SOUND, 0X003, 0X000        //分
    DW HONOR_CHECK, 0X000, 0X000        //檢查榮譽          
    
;---------------------------------------    

ZERO:

    DW ADPCM      , 0X00C, 0X000        //0 
    DW RETURN_END , 0X000, 0X000        //RET

ONE:

    DW ADPCM      , 0X00D, 0X000        //1 
    DW RETURN_END , 0X000, 0X000        //RET

TWO:

    DW ADPCM      , 0X00E, 0X000        //2 
    DW RETURN_END , 0X000, 0X000        //RET

THREE:

    DW ADPCM      , 0X00F, 0X000        //3
    DW RETURN_END , 0X000, 0X000        //RET 

FOUR:

    DW ADPCM      , 0X010, 0X000        //4
    DW RETURN_END , 0X000, 0X000        //RET 

FIVE:

    DW ADPCM      , 0X011, 0X000        //5
    DW RETURN_END , 0X000, 0X000        //RET 

SIX:

    DW ADPCM      , 0X012, 0X000        //6
    DW RETURN_END , 0X000, 0X000        //RET 

SEVEN:

    DW ADPCM      , 0X013, 0X000        //7
    DW RETURN_END , 0X000, 0X000        //RET 

EIGHT:

    DW ADPCM      , 0X014, 0X000        //8
    DW RETURN_END , 0X000, 0X000        //RET 

NINE:

    DW ADPCM      , 0X015, 0X000        //9
    DW RETURN_END , 0X000, 0X000        //RET 

TEN:

    DW ADPCM      , 0X016, 0X000        //十
    DW RETURN_END , 0X000, 0X000        //RET 

HUNDRED:

    DW ADPCM      , 0X017, 0X000        //百
    DW RETURN_END , 0X000, 0X000        //RET 

THOUSAND:

    DW ADPCM      , 0X018, 0X000        //千
    DW RETURN_END , 0X000, 0X000        //RET 

POINT:

    DW ADPCM      , 0X019, 0X000        //分
    DW RETURN_END , 0X000, 0X000        //RET 

END